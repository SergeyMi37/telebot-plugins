import datetime

from django.utils import timezone
from telegram import ParseMode, Update
from telegram.ext import CallbackContext
from telegram import InlineKeyboardButton, InlineKeyboardMarkup

from tgbot.handlers.onboarding import static_text
from tgbot.handlers.utils.info import extract_user_data_from_update, get_tele_command
from users.models import User
from tgbot.handlers.onboarding.keyboards import make_keyboard_for_start_command
from tgbot.handlers.admin.static_text import CRLF
# from tgbot.plugins import reports_gitlab, admin_plugin
from tgbot.handlers.broadcast_message.static_text import reports_wrong_format
from dtb.settings import settings, get_plugins_for_roles
from dtb.settings import logger
from tgbot.handlers.utils.decorators import check_groupe_user

@check_groupe_user
def command_dispatcher(update: Update, context: CallbackContext) -> None:
    u, created = User.get_user_and_created(update, context)
    upms = get_tele_command(update)
    telecmd = upms.text
    #plugins = get_plugins(u.get_all_roles())
    text = CRLF+f' dispatcher '+telecmd
    context.bot.send_message(
        chat_id=upms.chat.id,
        text=text,
        parse_mode=ParseMode.HTML
    )
    
@check_groupe_user
def command_help(update: Update, context: CallbackContext) -> None:
    u, created = User.get_user_and_created(update, context)
    upms = get_tele_command(update)
    #user_id = extract_user_data_from_update(update)['user_id']
    if created:
        text = static_text.start_created.format(first_name=u.first_name)
    else:
        text = static_text.start_not_created.format(first_name=u.first_name)

    # –í—Å–µ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    users_roles = u.get_all_roles()
    plugins = get_plugins_for_roles(users_roles) # –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–ª–∞–≥–∏–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–∑ –Ω–µ–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö
    #plugins = get_plugins(users_roles) # –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–ª–∞–≥–∏–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–∑ –Ω–µ–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö
    # todo get_unblock_plugins 
    text += CRLF+'üî∏/start: –ö–Ω–æ–ø–∫–∏ —Å—Å—ã–ª–æ–∫ –Ω–∞ –º–æ–¥—É–ª–∏'
    url = settings.get("SUPPORT_GROUP", "https://t.me/+__Qezxf7-E0xY2I6")
    text += CRLF+f'<a href=\"{url}\">üéØ–ì—Ä—É–ø–ø–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏. –û–±—Å—É–∂–¥–∞–µ–º –æ—à–∏–±–∫–∏ –∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É –Ω–æ–≤—ã—Ö –º–æ–¥—É–ª–µ–π</a>'
    if u.is_admin:
        url = settings.get("DEVELOP_GROUP", "https://t.me/+LXQkVtnHqSM1ZmZi")
        text += CRLF+f'<a href=\"{url}\">üéØ–ì—Ä—É–ø–ø–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏. –û–±—Å—É–∂–¥–∞–µ–º –∏ —É—á–∞—Å—Ç–≤—É–µ–º –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –±–æ—Ç–∞</a>'
    #if plugins:
    #    text += CRLF+'/plugins: —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π - –ø–ª–∞–≥–∏–Ω–æ–≤'
    if plugins.get('IRIS'):
        # –ï—Å–ª–∏ –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ –ø–ª–ø–≥–∏–Ω—É IRIS
        #text += CRLF+'üëâ---–º–æ–¥—É–ª—å-IRIS---------'
        text += CRLF+'üî∏/servers: –°–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤ IRIS'
        text += CRLF+'/s_TEST: –°–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ–¥—É–∫—Ü–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞ TEST'
    if plugins.get('GITLAB'):
        # –ï—Å–ª–∏ –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ –ø–ª–∞–≥–∏–Ω—É GITLAB
        #text += CRLF+'üëâ---–º–æ–¥—É–ª—å-GITLAB---------'
        text += CRLF+'üî∏/daily: –û—Ç—á–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –ø–æ –º–µ—Ç–∫–∞–º –ø—Ä–æ–µ–∫—Ç–∞'
        text += CRLF+'/yesterday: –û—Ç—á–µ—Ç –≤—á–µ—Ä–∞—à–Ω–∏–π –ø–æ –º–µ—Ç–∫–∞–º –ø—Ä–æ–µ–∫—Ç–∞'
        _i = 0
        
        if reports_gitlab.PROJ_RU:
            for _ru in reports_gitlab.PROJ_RU.split(','):
                if users_roles is not None and (_ru in users_roles or "All" in users_roles):
                    _en = reports_gitlab.PROJ_EN.split(',')[_i]
                    text += CRLF+f'/yesterday_{_en}: –û—Ç—á–µ—Ç –∑–∞ –≤—á–µ—Ä–∞ –ø–æ –º–µ—Ç–∫–µ "{_ru}"'
                    text += CRLF+f'/daily_{_en}: –û—Ç—á–µ—Ç –∑–∞ —Å–µ–≥–æ–¥–Ω—è –ø–æ –º–µ—Ç–∫–µ "{_ru}"'
                    text += CRLF+f'/daily_{_en}_noname: –û—Ç—á–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –ø–æ –º–µ—Ç–∫–µ "{_ru}" –æ–±–µ–∑–ª–∏—á–µ–Ω–Ω—ã–π'
                    text += CRLF+f'/weekly_{_en}: –û—Ç—á–µ—Ç –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –ø–æ –ø–µ—Ä–≤–æ–π —á–∞—Å—Ç–∏ $"'
                    text += CRLF
                _i += 1

        text += CRLF
        text += CRLF + reports_wrong_format
    # if plugins.get('GIGA'):
    #     # –ï—Å–ª–∏ –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ –ø–ª–ø–≥–∏–Ω—É GIGA
    #     text += CRLF+'üëâ---–º–æ–¥—É–ª—å-GIGA---------'
    #     text += CRLF+plugins.get('GIGA').get('desc')
    #     text += CRLF + '/giga - —Å–ø–∏—Å–æ–∫ –æ–ø—Ü–∏–π –º–æ–¥–µ–ª–∏ –∏–ª–∏ –∑–∞–¥–∞–≤–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã –±–µ–∑ –∫–æ–º–∞–Ω–¥. –ú–æ–¥–µ–ª—å –ø–æ–∫–∞ –Ω–µ –ø–æ–º–Ω–∏—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞'+CRLF

    for pl,val in plugins.items():
        if not (pl in ['GIGA','GITLAB','IRIS']): # –∫—Ä–æ–º–µ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –º–æ–¥—É–ª–µ–π
            if users_roles is not None and (pl in users_roles or "All" in users_roles):
                #text += CRLF + f'üëâ---–º–æ–¥—É–ª—å-{pl}---------'
                text += CRLF + f"üî∏/{pl.lower()} {val.get('desc')}"

    #if u.is_superadmin and (upms.chat.id==u.user_id): # –µ—Å–ª–∏ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω –∏ –º—ã –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ —Å –Ω–∏–º
        # text += CRLF+'üëâ----Super admin options--------'
        # # –ï—Å–ª–∏ –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Ä–æ–ª–∏ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω
        # text += admin_plugin._admin_help
        # # text += CRLF+' üìç/ask_location: –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é'
        # text += CRLF+' /broadcast –¢–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∞–µ–º–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è'
        # text += CRLF+' üë•/export_users: –≠–∫—Å–ø–æ—Ä—Ç users.csv'
        # text += CRLF+' /ask_info - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –±–æ—Ç–∞'
    
    #text += CRLF+CRLF+'üî∏/help: –ü–µ—Ä–µ—á–µ–Ω—å –∫–æ–º–∞–Ω–¥'
    context.bot.send_message(
        chat_id=upms.chat.id,
        text=text,
        disable_web_page_preview=True,
        parse_mode=ParseMode.HTML
    )

@check_groupe_user
def command_start(update: Update, context: CallbackContext) -> None:
    u, created = User.get_user_and_created(update, context)

    if created:
        text = static_text.start_created.format(first_name=u.first_name)
    else:
        text = static_text.start_not_created.format(first_name=u.first_name)
    
    '''
    markup = InlineKeyboardMarkup('',row_width=2)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É —Å –¥–≤—É–º—è –∫–Ω–æ–ø–∫–∞–º–∏
    button1 = InlineKeyboardButton("–ö–Ω–æ–ø–∫–∞ 1", callback_data="button1")
    button2 = InlineKeyboardButton("–ö–Ω–æ–ø–∫–∞ 2", callback_data="button2")
    markup.add(button1, button2)
    
    # –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞ —Å –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–æ–π
    button3 = InlineKeyboardButton("–ö–Ω–æ–ø–∫–∞ 3", callback_data="button3")
    markup.add(button3)
    update.message.reply_text(text=text, reply_markup=markup)

    '''
    update.message.reply_text(text=text, reply_markup=make_keyboard_for_start_command(u.get_all_roles()))
   
