
from datetime import datetime
from django.db.models import QuerySet
from typing import Dict
from pathlib import Path
from dtb.settings import DATABASE_URL, DEBUG
import os, socket, platform, requests, io, csv

def get_day_of_week(date_string):
    """ –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –¥–∞—Ç—ã –≤ –æ–±—ä–µ–∫—Ç datetime 
        –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
        print(get_day_of_week("2023-10-25"))  # –í—ã–≤–µ–¥–µ—Ç "–°—Ä–µ–¥–∞"
        print(get_day_of_week("26.10.2023"))  # –í—ã–≤–µ–¥–µ—Ç "–ß–µ—Ç–≤–µ—Ä–≥"
    """
    date_obj = datetime.strptime(date_string, "%d.%m.%Y") if "." in date_string else datetime.strptime(date_string, "%Y-%m-%d")
    # –°–ø–∏—Å–æ–∫ —Ä—É—Å—Å–∫–∏—Ö –Ω–∞–∑–≤–∞–Ω–∏–π –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
    days = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞", "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –ø–æ –∏–Ω–¥–µ–∫—Å—É
    return days[date_obj.weekday()]

def _get_csv_from_qs_values(queryset: QuerySet[Dict], filename: str = 'users'):
    keys = queryset[0].keys()
    print('--csvkeys-',type(keys),keys)
    print('--csv-',type(queryset),queryset)
    # csv module can write data in io.StringIO buffer only
    s = io.StringIO()
    dict_writer = csv.DictWriter(s, fieldnames=keys)
    dict_writer.writeheader()
    dict_writer.writerows(queryset)
    s.seek(0)

    # python-telegram-bot library can send files only from io.BytesIO buffer
    # we need to convert StringIO to BytesIO
    buf = io.BytesIO()

    # extract csv-string, convert it to bytes and write to buffer
    buf.write(s.getvalue().encode())
    buf.seek(0)

    # set a filename with file's extension
    buf.name = f"{filename}__{datetime.now().strftime('%Y.%m.%d.%H.%M')}.csv"

    return buf

def piece(value,  *args, **kwargs):
    if not value: return ""
    delimiter = kwargs['delimiter']
    num = kwargs['num']
    return value.split(delimiter)[num]  # $piece(a,"*",num)

def iris_piece(value, delim, num):
    if not value: return ""
    return value.split(delim)[num]  # txt.split(" ")[1::])) # $piece(a," ",2,

class GetExtInfo:
    """–ö–ª–∞—Å—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏."""

    @staticmethod
    def GetGitInfo():
        """–ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ—Å—Ç–µ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã –∏ –≤–µ—Ç–∫–∏ –ì–∏—Ç–∞"""
        # –ü–æ–ª—É—á–∏—Ç—å —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –ø—É—Ç—å –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã
        dir = str(Path(os.getcwd()).resolve()) # .parent)
        # –ù–∞–π—Ç–∏ —Ñ–∞–π–ª —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≤–µ—Ç–∫–∞—Ö –ø—Ä–æ–µ–∫—Ç–∞
        fn = os.path.join(dir + "/.git", "config")
        fnind = os.path.join(dir + "/.git", "index")
       
        if os.path.exists(fn):
            with open(fn, 'r') as file:
                # –ø–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ñ–∞–π–ª–∞
                fn_datatime = f"üìÜ { (datetime.fromtimestamp(os.path.getmtime(fnind)) )}"
                content = file.read()
                dir += f"\n üå¥ –ü–æ—Å–ª–µ–¥–Ω—è—è –≤–µ—Ç–∫–∞ [{content.split('[branch ')[content.count('[branch ')]}  {fn_datatime}"
        return f"\n üöß –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏: {DEBUG}\n üÖø DATABASE_URL :{DATABASE_URL}\n üìÇ –ö–∞—Ç–∞–ª–æ–≥ –ø—Ä–æ–µ–∫—Ç–∞ {dir}"

    @staticmethod
    def GetHostInfo():
        """–ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ö–æ—Å—Ç–µ –∏ IP"""
        # –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Ö–æ—Å—Ç–∞
        hostname = socket.gethostname()
        # –ü–æ–ª—É—á–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π IP –∞–¥—Ä–µ—Å (IPv4)
        ip_address = socket.gethostbyname(hostname)
        #print(f'IP –∞–¥—Ä–µ—Å: {ip_address}')
        return f"\n üî≥ –ò–º—è —Ö–æ—Å—Ç–∞: {hostname}\n üî≥ IP –∞–¥—Ä–µ—Å: {ip_address}"

    @staticmethod
    def GetExtIp():
        """–ü–æ–ª—É—á–∏—Ç—å –≤–Ω–µ—à–Ω–∏–π IP"""
        # –ü–æ–ª—É—á–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞
        url = 'https://api.ipify.org/'
        response = requests.get(url,verify=False) #,headers=headers,timeout=timeout,auth=auth)
        #print(response.text)
        return f"\n üåê IP –∞–¥—Ä–µ—Å: {response.text}"

    @staticmethod
    def GetOS():
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –û–°"""
        # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –∏ –≤–µ—Ä—Å–∏—é –û–°
        os_name = platform.system()
        os_version = platform.release()
        return (f"\n‚≠ï –û–°: {os_name}, –≤–µ—Ä—Å–∏—è: {os_version}")