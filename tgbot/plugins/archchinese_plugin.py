# Name Plugin: TEMPLATE
    # - MEDIA:
    #     - desc = –°–µ—Ä–≤–∏—Å –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ä–æ–ª–∏–∫–æ–≤ —Å –Æ—Ç—É–±–∞ –∏ –í–∫–í–∏–¥–µ–æ –∏ –æ–±–º–µ–Ω–∞ —Å—Å—ã–ª–∫–∞–º–∏ –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –±–æ—Ç–∞
# –∏–º—è –ø–ª–∞–≥–∏–Ω–∞ MEDIA –¥–æ–ª–∂–Ω–æ —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å –∏–º–µ–Ω–µ–º –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Dynaconf
# –∏–º—è –ø–ª–∞–≥–∏–Ω–∞ media –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–µ—Ä–≤—ã–º –ø–æ–ª–µ–º –æ—Ç _ –≤ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ media_plugin
# –∏–º—è —Ñ–∞–π–ª–∞ –ø–ª–∞–≥–∏–Ω–∞ –¥–æ–ª–∂–Ω–æ –æ–∫–∞—á–∏–≤–∞—Ç—å—Å—è –Ω–∞ _plugin
# –í –º–æ–¥—É–ª–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ–ø—Ä–¥–µ–ª–Ω –∫–ª–∞—Å—Å –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–µ
# class MEFIAPlugin(BasePlugin):
#    def setup_handlers(self, dp):

from telegram import ParseMode, Update
from telegram.ext import CallbackContext
# from dtb.settings import get_plugins_for_roles
# from dtb.settings import logger
from tgbot.handlers.utils.info import get_tele_command
from tgbot.handlers.utils.decorators import check_groupe_user
from users.models import User
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackQueryHandler, ConversationHandler
from tgbot.plugins.base_plugin import BasePlugin

# –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ —Ä–æ–ª—å ''
#plugin_wiki = get_plugins_for_roles('').get('WIKI')

plugin_cmd = "template"
CODE_INPUT = range(1)
plugin_help = f'–ó–∞–≥—Ä—É–∑–∫–∞ —Ä–æ–ª–∏–∫–æ–≤ —Å —é—Ç—É–±–∞. üî∏/help /{plugin_cmd} /{plugin_cmd}_ - –¥–∏–∞–ª–æ–≥ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–æ–ª–∏–∫–æ–≤ —Å —é—Ç—É–±–∞' 


def request_p(update: Update, context):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    upms = get_tele_command(update)
    upms.reply_text(f"–í–≤–µ–¥–∏—Ç–µ —É—Ä–ª –∏–ª–∏ /cancel_{plugin_cmd} - –æ—Ç–º–µ–Ω–∞")
    return CODE_INPUT

def check_p(update: Update, context):
    upms = get_tele_command(update)
    _in = upms.text
    _out = f'–ë—É–¥–µ—Ç –∑–∞–≥—Ä—É–∑–∫–∞ {_in}\n\rüî∏/help /{plugin_cmd}_' 
    context.bot.send_message(
        chat_id=upms.chat.id,
        text=_out,
        disable_web_page_preview=True,
        parse_mode=ParseMode.HTML
    )
    return ConversationHandler.END

def cancel_p(update: Update, context):
    """–ó–∞–≤–µ—Ä—à–∞–µ–º –¥–∏–∞–ª–æ–≥"""
    upms = get_tele_command(update)
    upms.reply_text("–†–∞–∑–≥–æ–≤–æ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω.")
    return ConversationHandler.END

# def error(update, context):
#     logger.warning('Update "%s" caused error "%s"', update, context.error)

class PPlugin(BasePlugin):
    def setup_handlers(self, dp):
        conv_handler = ConversationHandler(
            entry_points=[CommandHandler(f'{plugin_cmd}_', request_p)],
            states={
                CODE_INPUT: [
                    MessageHandler(Filters.text & (~Filters.command), check_p),
                ],
            },
            fallbacks=[
                CommandHandler(f'cancel_{plugin_cmd}', cancel_p),
            ]
        )
        dp.add_handler(conv_handler)
        dp.add_handler(MessageHandler(Filters.regex(rf'^/{plugin_cmd}(/s)?.*'), commands))
        dp.add_handler(CallbackQueryHandler(button, pattern=f"^button_{plugin_cmd}"))

@check_groupe_user
def button(update: Update, context: CallbackContext) -> None:
    #user_id = extract_user_data_from_update(update)['user_id']
    u = User.get_user(update, context)
    upms = get_tele_command(update)
    text = "–í–≤–µ–¥–∏—Ç–µ ..."
    text += plugin_help
    context.bot.edit_message_text(
        text=text,
        chat_id=upms.chat.id, #  u.user_id,
        message_id=update.callback_query.message.message_id,
        parse_mode=ParseMode.HTML
    )

@check_groupe_user
def commands(update: Update, context: CallbackContext) -> None:
    #u = User.get_user(update, context)
    upms = get_tele_command(update)
    telecmd = upms.text
    #if telecmd == '/':
    _out = plugin_help
    context.bot.send_message(
        chat_id=upms.chat.id,
        text=_out,
        disable_web_page_preview=True,
        parse_mode=ParseMode.HTML
    )


# –ü—Ä–∏–≤–µ—Ç! –û—Ç–ª–∏—á–Ω–∞—è –∏–¥–µ—è! –í–æ—Ç –ø—Ä–æ–≥—Ä–∞–º–º–∞ –Ω–∞ Python, –∫–æ—Ç–æ—Ä–∞—è —Ä–µ–∞–ª–∏–∑—É–µ—Ç –∑–∞–¥—É–º–∞–Ω–Ω–æ–µ:

# ```python
import requests
from bs4 import BeautifulSoup
import re

def get_character_etymology(character):
    """
    –ü–æ–ª—É—á–∞–µ—Ç —ç—Ç–∏–º–æ–ª–æ–≥–∏—é –∫–∏—Ç–∞–π—Å–∫–æ–≥–æ –∏–µ—Ä–æ–≥–ª–∏—Ñ–∞ —Å archchinese.com
    """
    url = f"https://www.archchinese.com/chinese_english_dictionary.html?find={character}"
    
    try:
        response = requests.get(url)
        response.raise_for_status()
        
        soup = BeautifulSoup(response.text, 'html.parser')
        
        # –ò—â–µ–º –±–ª–æ–∫ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –∏–µ—Ä–æ–≥–ª–∏—Ñ–µ
        char_info = soup.find('div', class_='char-info')
        if not char_info:
            return None
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ–∞
        char_name = char_info.find('h2').get_text(strip=True) if char_info.find('h2') else character
        
        # –ò—â–µ–º —Ä–∞–¥–∏–∫–∞–ª
        radical_info = char_info.find('span', string=re.compile('Radical'))
        radical = radical_info.get_text(strip=True).replace('Radical:', '').strip() if radical_info else "–ù–µ –Ω–∞–π–¥–µ–Ω"
        
        # –ò—â–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ä–∞–∑–±–æ—Ä–∞
        decomposition = char_info.find('span', string=re.compile('Decomposition'))
        decomposition_text = decomposition.get_text(strip=True).replace('Decomposition:', '').strip() if decomposition else "–ù–µ –Ω–∞–π–¥–µ–Ω"
        
        # –ò—â–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        components = []
        comp_elements = char_info.find_all('a', class_='comp-link')
        for comp in comp_elements:
            comp_text = comp.get_text(strip=True)
            comp_href = comp.get('href', '')
            components.append(f"{comp_text}")
        
        return {
            'character': char_name,
            'radical': radical,
            'decomposition': decomposition_text,
            'components': components
        }
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {character}: {e}")
        return None

def parse_chinese_word(word):
    """
    –†–∞–∑–±–∏—Ä–∞–µ—Ç –∫–∏—Ç–∞–π—Å–∫–æ–µ —Å–ª–æ–≤–æ –Ω–∞ –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã –∏ –ø–æ–ª—É—á–∞–µ—Ç —ç—Ç–∏–º–æ–ª–æ–≥–∏—é –¥–ª—è –∫–∞–∂–¥–æ–≥–æ
    """
    results = []
    
    for char in word:
        print(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∏–µ—Ä–æ–≥–ª–∏—Ñ: {char}")
        etymology = get_character_etymology(char)
        
        if etymology:
            results.append(etymology)
        else:
            results.append({
                'character': char,
                'radical': "–ù–µ –Ω–∞–π–¥–µ–Ω",
                'decomposition': "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ",
                'components': []
            })
    
    return results

def display_results(word, results):
    """
    –ö—Ä–∞—Å–∏–≤–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    """
    print(f"\n{'='*60}")
    print(f"–≠–¢–ò–ú–û–õ–û–ì–ò–Ø –°–õ–û–í–ê: {word}")
    print(f"{'='*60}")
    
    for i, result in enumerate(results, 1):
        print(f"\n{i}. –ò–µ—Ä–æ–≥–ª–∏—Ñ: {result['character']}")
        print(f"   –†–∞–¥–∏–∫–∞–ª: {result['radical']}")
        print(f"   –†–∞–∑–±–æ—Ä: {result['decomposition']}")
        
        if result['components']:
            print(f"   –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã: {', '.join(result['components'])}")
        print(f"   {'-'*40}")

def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã
    """
    print("–ö–∏—Ç–∞–π—Å–∫–∏–π —ç—Ç–∏–º–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä")
    print("–í–≤–µ–¥–∏—Ç–µ –∫–∏—Ç–∞–π—Å–∫–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: Áâõ‰ªîË£§)")
    print("–î–ª—è –≤—ã—Ö–æ–¥–∞ –≤–≤–µ–¥–∏—Ç–µ 'quit'")
    
    while True:
        word = input("\n–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ: ").strip()
        
        if word.lower() in ['quit', 'exit', 'q']:
            print("–î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            break
        
        if not word:
            print("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ.")
            continue
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–µ–¥–µ–Ω—ã –∫–∏—Ç–∞–π—Å–∫–∏–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã
        if not re.search(r'[\u4e00-\u9fff]', word):
            print("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–∏—Ç–∞–π—Å–∫–∏–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã.")
            continue
        
        print(f"\n–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å–ª–æ–≤–æ: {word}...")
        
        results = parse_chinese_word(word)
        display_results(word, results)

if __name__ == "__main__":
    # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏:
    # pip install requests beautifulsoup4
    main()
# ```

# –¢–∞–∫–∂–µ –≤–æ—Ç —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è, –µ—Å–ª–∏ –≤–∞–º –Ω—É–∂–µ–Ω –±–æ–ª–µ–µ –±—ã—Å—Ç—Ä—ã–π –≤–∞—Ä–∏–∞–Ω—Ç:

# ```python
# import requests
# from bs4 import BeautifulSoup

# def get_etymology_simple(word):
#     """–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è –æ–¥–Ω–æ–≥–æ —Å–ª–æ–≤–∞"""
#     url = f"https://www.archchinese.com/chinese_english_dictionary.html?find={word}"
    
#     try:
#         response = requests.get(url)
#         soup = BeautifulSoup(response.text, 'html.parser')
        
#         # –ò—â–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
#         char_info = soup.find('div', class_='char-info')
#         if char_info:
#             radical = char_info.find('span', string=lambda x: x and 'Radical' in x)
#             decomposition = char_info.find('span', string=lambda x: x and 'Decomposition' in x)
            
#             return {
#                 'radical': radical.get_text().replace('Radical:', '').strip() if radical else "–ù–µ –Ω–∞–π–¥–µ–Ω",
#                 'decomposition': decomposition.get_text().replace('Decomposition:', '').strip() if decomposition else "–ù–µ –Ω–∞–π–¥–µ–Ω"
#             }
    
#     except:
#         return None

# # –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
# word = "Áâõ‰ªîË£§"
# print(f"–ê–Ω–∞–ª–∏–∑ —Å–ª–æ–≤–∞: {word}")

# for char in word:
#     result = get_etymology_simple(char)
#     if result:
#         print(f"\n{char}:")
#         print(f"  –†–∞–¥–∏–∫–∞–ª: {result['radical']}")
#         print(f"  –†–∞–∑–±–æ—Ä: {result['decomposition']}")
# # ```

# **–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:**

# 1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏:
# ```bash
# pip install requests beautifulsoup4
# ```

# 2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É –∏ –≤–≤–µ–¥–∏—Ç–µ –∫–∏—Ç–∞–π—Å–∫–æ–µ —Å–ª–æ–≤–æ

# **–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã:**

# - –†–∞–∑–±–∏—Ä–∞–µ—Ç —Å–ª–æ–≤–æ –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã
# - –î–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–µ—Ä–æ–≥–ª–∏—Ñ–∞ –ø–æ–ª—É—á–∞–µ—Ç —Ä–∞–¥–∏–∫–∞–ª –∏ —Ä–∞–∑–±–æ—Ä –Ω–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
# - –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ —É–¥–æ–±–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
# - –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏ —Å–µ—Ç–∏ –∏ –ø–∞—Ä—Å–∏–Ω–≥–∞

# **–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:**

# - –ó–∞–≤–∏—Å–∏—Ç –æ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å–∞–π—Ç–∞ archchinese.com (–ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –Ω–∞ —Å–∞–π—Ç–µ –º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–¥–∞)
# - –ú–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –º–µ–¥–ª–µ–Ω–Ω–æ –∏–∑-–∑–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ —Å–∞–π—Ç—É
# - –î–ª—è –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —É—Å–ª–æ–≤–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–∞–π—Ç–∞

# –ü—Ä–æ–≥—Ä–∞–º–º–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–∞—à–∏ –ø—Ä–∏–º–µ—Ä—ã –∏ –ø–æ–∫–∞–∂–µ—Ç —Ä–∞–∑–±–æ—Ä –∫–∞–∂–¥–æ–≥–æ –∏–µ—Ä–æ–≥–ª–∏—Ñ–∞ –Ω–∞ —Å–æ—Å—Ç–∞–≤–ª—è—é—â–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã!
