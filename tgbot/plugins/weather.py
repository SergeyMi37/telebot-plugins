# Name Plugin: 
    # - WEATHER:
    #     desc = –ü–æ–≥–æ–¥–∞  –ú–æ—Å–∫–≤–µ –Ω–∞ –¥–µ–Ω—å –∏ 10 –¥–Ω–µ–π. –í–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É, –Ω–∞–ø—Ä–∏–º–µ—Ä /weater moscow 10
from django.utils import timezone
from telegram import ParseMode, Update
from telegram.ext import CallbackContext
from dtb.settings import get_plugins
from dtb.settings import logger
from tgbot.handlers.admin.static_text import CRLF, only_for_admins
from tgbot.handlers.utils.info import get_tele_command
from tgbot.handlers.utils.decorators import check_blocked_user
from users.models import User, Location
import requests
from datetime import datetime, timedelta
from geopy.geocoders import Nominatim
from tgbot.plugins import wiki
from tgbot.handlers.admin.utils import get_day_of_week

# –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ —Ä–æ–ª—å ''
plugin_weather = get_plugins('').get('WEATHER')

# https://dadata.ru/api/geolocate/
# https://github.com/hflabs/dadata-py
from dadata import Dadata

# https://www.openstreetmap.org/  ¬´–î–∞–¥–∞—Ç–∞¬ª –±–µ—Ä–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–æ–º–æ–≤ –∏ —É–ª–∏—Ü –∏–∑ OpenStreetMap. 
def get_adress(lat,lon):
    token = plugin_weather.get('dadata_token','')
    if not token:
        return ''
    dadata = Dadata(token)
    result = dadata.geolocate(name="address", lat=lat, lon=lon)
    if result:
        val = result[0]['value'] # –ø–µ—Ä–≤—ã–π –±–ª–∏–∂–∞–π—à–∏–π –∞–¥—Ä–µ—Å
        #print('---',val)
    else:
        val = ''
    return val

def reverse_geocode(lat, lon):
    # –ë–∞–∑–æ–≤–∞—è —Å—Å—ã–ª–∫–∞ API Nominatim
    base_url = 'https://nominatim.openstreetmap.org/reverse'
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
    params = {
        'format': 'json',       # –§–æ—Ä–º–∞—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ ‚Äî JSON
        'lat': lat,             # –®–∏—Ä–æ—Ç–∞ —Ç–æ—á–∫–∏
        'lon': lon,             # –î–æ–ª–≥–æ—Ç–∞ —Ç–æ—á–∫–∏
        'zoom': 18,             # –£—Ä–æ–≤–µ–Ω—å –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–∞—Ä—Ç—ã
        'addressdetails': 1     # –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∞–¥—Ä–µ—Å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    }
    headers = {'User-Agent': 'Mozilla/5.0'}
    #response = requests.get(url, headers=headers)
    try:
        response = requests.get(base_url, params=params, headers=headers)
        
        if response.status_code == 200:
            data = response.json()
            
            address = data['address']
            result = f"{address.get('road', '')}, {address.get('village', '')}, {address.get('city', '')}, {address.get('state', '')}, {address.get('country', '')}"
            return 200, result.strip(', ')
        else:
            return response.status_code, (f'–û—à–∏–±–∫–∞: {response.status_code}')

    except Exception as e:
        return 1, (f'–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞: {e}')


def get_coordinates(place_name):
    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç-–≥–µ–æ–∫–æ–¥–µ—Ä–∞ OpenStreetMap (Nominatim)
    geolocator = Nominatim(user_agent="geo_query")
    try:
        location = geolocator.geocode(place_name)
        if location is None:
            res = (f"–ú–µ—Å—Ç–æ '{place_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return res, 0, 0 
        else:
            latitude = location.latitude
            longitude = location.longitude
            return 200, latitude, longitude 
            #print(f"–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã {place_name}: —à–∏—Ä–æ—Ç–∞={latitude}, –¥–æ–ª–≥–æ—Ç–∞={longitude}")
    
    except Exception as e:
        #print("–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞:", str(e))
        return str(e), 0, 0 


def get_weather_forecast(latitude, longitude, days=1):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π"""
    uri  = plugin_weather.get('url','')
    if not uri:
        print(f"–ü—É—Å—Ç–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä url –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö dynaconf")
        return None
    url = (
        f"{uri}?"
        f"latitude={latitude}&longitude={longitude}"
        f"&daily=weathercode,temperature_2m_max,temperature_2m_min,precipitation_sum"
        f"&timezone=auto"
        f"&forecast_days={days}"
    )
    try:
        response = requests.get(url)
        response.raise_for_status()
        return response.json()
    except requests.exceptions.RequestException as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        return None

def decode_weather(code):
    """–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –∫–æ–¥–æ–≤ –ø–æ–≥–æ–¥—ã"""
    weather_codes = {
        0: "‚òÄÔ∏è–Ø—Å–Ω–æ",
        1: "üå§–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–µ–Ω–Ω–æ —è—Å–Ω–æ",
        2: "‚õÖÔ∏è–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å",
        3: "üå•–ü–∞—Å–º—É—Ä–Ω–æ",
        45: "‚òÅ–¢—É–º–∞–Ω",
        48: "‚òÅüí®–ò–Ω–µ–π–Ω—ã–π —Ç—É–º–∞–Ω",
        51: "üí®–õ–µ–≥–∫–∞—è –º–æ—Ä–æ—Å—å",
        53: "üí®üí®–£–º–µ—Ä–µ–Ω–Ω–∞—è –º–æ—Ä–æ—Å—å",
        55: "üí®üîµ–°–∏–ª—å–Ω–∞—è –º–æ—Ä–æ—Å—å",
        56: "üíß–õ–µ–¥—è–Ω–∞—è –º–æ—Ä–æ—Å—å",
        57: "‚ùÑüíß–°–∏–ª—å–Ω–∞—è –ª–µ–¥—è–Ω–∞—è –º–æ—Ä–æ—Å—å",
        61: "‚õà–ù–µ–±–æ–ª—å—à–æ–π –¥–æ–∂–¥—å",
        63: "üåÇ‚òî–£–º–µ—Ä–µ–Ω–Ω—ã–π –¥–æ–∂–¥—å",
        65: "üåß‚òî–°–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å",
        66: "‚ùÑüíß–õ–µ–¥—è–Ω–æ–π –¥–æ–∂–¥—å",
        67: "‚ùÑüíßüíß–°–∏–ª—å–Ω—ã–π –ª–µ–¥—è–Ω–æ–π –¥–æ–∂–¥—å",
        71: "‚ùÑÔ∏è–ù–µ–±–æ–ª—å—à–æ–π —Å–Ω–µ–≥",
        73: "üå®‚ùÑ–£–º–µ—Ä–µ–Ω–Ω—ã–π —Å–Ω–µ–≥",
        75: "üå®‚ùÑÔ∏è‚ùÑ–°–∏–ª—å–Ω—ã–π —Å–Ω–µ–≥",
        77: "‚ùÑ‚ùÑÔ∏èüîµ–°–Ω–µ–∂–Ω—ã–µ –∑–µ—Ä–Ω–∞",
        80: "‚òî–ù–µ–±–æ–ª—å—à–∏–µ –ª–∏–≤–Ω–∏",
        81: "‚òîüåß–£–º–µ—Ä–µ–Ω–Ω—ã–µ –ª–∏–≤–Ω–∏",
        82: "‚òî‚òîüåß–°–∏–ª—å–Ω—ã–µ –ª–∏–≤–Ω–∏",
        85: "‚ùÑ‚òÉÔ∏èüíß–°–Ω–µ–∂–Ω—ã–µ –ª–∏–≤–Ω–∏",
        86: "‚ùÑÔ∏è‚òÉÔ∏èüíß–°–∏–ª—å–Ω—ã–µ —Å–Ω–µ–∂–Ω—ã–µ –ª–∏–≤–Ω–∏",
        95: "‚ö°–ì—Ä–æ–∑–∞",
        96: "‚ö°üå©–ì—Ä–æ–∑–∞ —Å –≥—Ä–∞–¥–æ–º",
        99: "‚ö°üíßüå©–°–∏–ª—å–Ω–∞—è –≥—Ä–æ–∑–∞ —Å –≥—Ä–∞–¥–æ–º"
    }
    return weather_codes.get(code, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–æ–¥")

def print_forecast(forecast, city_name):
    """–í—ã–≤–æ–¥ –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã –≤ —á–∏—Ç–∞–µ–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ"""
    out=""
    if not forecast or "daily" not in forecast:
        out += (f"\n–î–∞–Ω–Ω—ã–µ –¥–ª—è {city_name} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
        return out

    out += (f"\nüåû–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –¥–ª—è: {city_name}")
    out += (f"\nüïê–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {forecast['timezone_abbreviation']} (UTC{forecast['utc_offset_seconds']//3600:+d})")
    
    for i, date in enumerate(forecast["daily"]["time"]):
        dt = datetime.fromisoformat(date)
        ddmmyyyy = dt.strftime('%d.%m.%Y')
        mark = "üî¥" if get_day_of_week(ddmmyyyy,1) in [5,6] else "‚ö™Ô∏è"
        out += (f"\n{mark}üìÜ{ddmmyyyy} ({'–∑–∞–≤—Ç—Ä–∞' if i == 1 else '—Å–µ–≥–æ–¥–Ω—è' if i == 0 else date})")
        out += f'<b> {get_day_of_week(ddmmyyyy)}</b>'
        out += (f"\n  {decode_weather(forecast['daily']['weathercode'][i])}")
        #out += (f"\n–ú–∞–∫—Å. —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {forecast['daily']['temperature_2m_max'][i]}¬∞C")
        #out += (f"\n–ú–∏–Ω. —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {forecast['daily']['temperature_2m_min'][i]}¬∞C")
        out += (f"\n  {forecast['daily']['temperature_2m_min'][i]} - {forecast['daily']['temperature_2m_max'][i]} ¬∞C")
        out += (f"\n  –û—Å–∞–¥–∫–∏: {forecast['daily']['precipitation_sum'][i]} –º–º")
    out += ("\n")
    return out

# –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≥–æ—Ä–æ–¥–æ–≤
def decode_cities(name):
    cities = {
        "–ú–æ—Å–∫–≤–∞": (55.7558, 37.6173),
        "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥": (59.9343, 30.3351),
        "–õ—é–¥–≤–∏–≥—Å—Ö–∞—Ñ–µ–Ω": (49.4811, 8.4353)
    }
    return cities.get(name, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–∫–∞ –≥–æ—Ä–æ–¥")

def get_forecast(city,latitude=None,longitude=None,title=""):
    ou=""
    cities = {
        "Moscow": (55.7558, 37.6173),
        "Piter": (59.9343, 30.3351),
        "Eburg": (56,8519, 60,6122),
        "Ludwigshafen": (49.4811, 8.4353)
    }
    if latitude:
        lat = latitude
        lon = longitude
    elif cities.get(city,'')=='':
        st, lat, lon = get_coordinates(city)
        if not st == 200:
            ou += f"–ü–æ –≥–æ—Ä–æ–¥—É {city} –Ω–µ—Ç –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏. {st}"
            return ou
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏ –≤—ã–≤–æ–¥ –ø—Ä–æ–≥–Ω–æ–∑–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≥–æ—Ä–æ–¥–∞ üå¶ 
    else:
        lat = cities[city][0]
        lon = cities[city][1]
    #for city, (lat, lon) in cities.items():
        # –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ (2 –¥–Ω—è: —Å–µ–≥–æ–¥–Ω—è+–∑–∞–≤—Ç—Ä–∞)
        #forecast_tomorrow = get_weather_forecast(lat, lon, days=2)
        
        # –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 7 –¥–Ω–µ–π
    forecast_7days = get_weather_forecast(lat, lon, days=7)
        
        # –í—ã–≤–æ–¥–∏–º —Ç–æ–ª—å–∫–æ –∑–∞–≤—Ç—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å –∏–∑ –ø–µ—Ä–≤–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞
        # if forecast_tomorrow and "daily" in forecast_tomorrow:
        #     tomorrow_forecast = {
        #         "timezone_abbreviation": forecast_tomorrow["timezone_abbreviation"],
        #         "utc_offset_seconds": forecast_tomorrow["utc_offset_seconds"],
        #         "daily": {
        #             key: [value[1]]  # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –¥–∞–Ω–Ω—ã–µ –∑–∞ –∑–∞–≤—Ç—Ä–∞ (–∏–Ω–¥–µ–∫—Å 1)
        #             for key, value in forecast_tomorrow["daily"].items()
        #         }
        #     }
        #     ou += print_forecast(tomorrow_forecast, f"{city} (–ó–∞–≤—Ç—Ä–∞)")
    
    #url = f"https://yandex.ru/maps/?ll={lon}%2C{lat}&z=11&l=map" # (8-20–∫–º, 10-6–∫–º 12-2–∫–º, 15-200–º 17-60–º,).
    url = f"https://yandex.ru/maps/?pt={lon},{lat}&z=11&l=map" # (8-20–∫–º, 10-6–∫–º 12-2–∫–º, 15-200–º 17-60–º,).
    # ?pt=37.393269,55.029111;37.5,55.75
    st, summ, link = wiki.fetch_page_data(city)
    wikiname = f"<a href=\"{link}\">{city}</a>" if st == 200 else city
    links = f"{wikiname} üåé<a href=\"{url}\">({title} {str(lat)[:5]},{str(lon)[:5]})</a>"
    # –í—ã–≤–æ–¥–∏–º 7-–¥–Ω–µ–≤–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑
    if forecast_7days:
        ou += print_forecast(forecast_7days, f"{links} (7 –¥–Ω–µ–π)")
    else:
        ou += f"{links})"
    return ou

@check_blocked_user
def button(update: Update, context: CallbackContext) -> None:
    #user_id = extract_user_data_from_update(update)['user_id']
    u = User.get_user(update, context)
    text = "–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –∏–ª–∏ —Ñ—Ä–∞–∑—É..."
    text += '\n\r/help /wiki'
    context.bot.edit_message_text(
        text=text,
        chat_id=u.user_id,
        message_id=update.callback_query.message.message_id,
        parse_mode=ParseMode.HTML
    )

@check_blocked_user
def commands(update: Update, context: CallbackContext) -> None:
    u = User.get_user(update, context)
    telecmd, upms = get_tele_command(update)
    cmd = telecmd.split('weather')[1]
    #/weater_Moscow –≤ –ú–æ—Å–∫–≤–µ –Ω–∞ –¥–µ–Ω—å –∏ 7 –¥–Ω–µ–π. /weater_Piter /weater_Eburg /weater_Ludwigshafen
    if cmd.lower()=='_moscow':
       _out = get_forecast("Moscow")
    elif cmd=='':
       #  –ø–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–ø–∏—Å—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
       #last_location = Location.objects.filter(user_id=u.user_id).latest('created_at')
        if Location.objects.filter(user_id=u.user_id).exists():
            last_location = Location.objects.filter(user_id=u.user_id).latest('created_at')
            place = get_adress(last_location.latitude,last_location.longitude)
            st, place2 = reverse_geocode(last_location.latitude,last_location.longitude)
            if st==200:
                place += f"---{place2}"
            else:
                print(place2)
            _out = get_forecast(".",last_location.latitude,last_location.longitude,f"–í–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ {place}")
            _out +=  "–û–±–Ω–æ–≤–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π üìç/ask_location"
        else:
            _out = '–î–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã –ø–æ –≤–∞—à–µ–π –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –µ—ë –∫–æ–º–∞–Ω–¥–æ–π üìç/ask_location'
    elif cmd.lower()=='_list':
       _out = f"/weather_Moscow –≤ –ú–æ—Å–∫–≤–µ –Ω–∞ –¥–µ–Ω—å –∏ 7 –¥–Ω–µ–π. /weather_Piter /weather_Eburg /weather_–°–µ—Ä–ø—É—Ö–æ–≤ /weather_–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥ /weather_–ù–µ—è"
    elif cmd.lower()=='_piter':
       _out = get_forecast("Piter")
    elif cmd.lower()=='_eburg':
       _out = get_forecast("–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥")
    else:
        _out = get_forecast(cmd.replace('_',''))
        #_out = f"–ü–æ –≥–æ—Ä–æ–¥—É {cmd} –µ—â–µ –Ω–µ—Ç –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏"
    #print(_out)
    _out += '\n\r/help /weather'
    context.bot.send_message(
        chat_id=u.user_id,
        text=_out,
        parse_mode=ParseMode.HTML
    )