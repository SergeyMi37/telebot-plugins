# Name Plugin: DUCKDUCKGO
    # - DUCKDUCKGO:
    #- desc = –ü–æ–∏—Å–∫ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ –≤ –ø–æ–∏—Å–∫–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ DuckDuckGo. /duckduckgo_
# –∏–º—è –ø–ª–∞–≥–∏–Ω–∞ DUCKDUCKGO –¥–æ–ª–∂–Ω–æ —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å –∏–º–µ–Ω–µ–º –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Dynaconf
# –∏–º—è –ø–ª–∞–≥–∏–Ω–∞ duckduckgo –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–µ—Ä–≤—ã–º –ø–æ–ª–µ–º –æ—Ç _ –≤ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ duckduckgo_plugin
# –∏–º—è —Ñ–∞–π–ª–∞ –ø–ª–∞–≥–∏–Ω–∞ –¥–æ–ª–∂–Ω–æ –æ–∫–∞—á–∏–≤–∞—Ç—å—Å—è –Ω–∞ _plugin
# –í –º–æ–¥—É–ª–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ–ø—Ä–¥–µ–ª–Ω –∫–ª–∞—Å—Å –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–µ
# class DDGPlugin(BasePlugin):
#    def setup_handlers(self, dp):

import requests
from telegram import ParseMode, Update
from telegram.ext import CallbackContext
from dtb.settings import get_plugins
from dtb.settings import logger
from tgbot.handlers.utils.info import get_tele_command
from tgbot.handlers.utils.decorators import check_groupe_user
from users.models import User
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackQueryHandler, ConversationHandler
from tgbot.plugins.base_plugin import BasePlugin
#from duckduckgo_search import ddg
from duckduckgo_search import DDGS

def search_on_russian(query, num_results=3):
    """
    –ü–æ–∏—Å–∫ –≤ DuckDuckGo —Å —Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω—ã–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    :param query: –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
    :param num_results: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 5)
    :return: —Å–ø–∏—Å–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    """
    results = []
    with DDGS() as ddgs:
        # –î–æ–±–∞–≤–ª—è–µ–º "lang:ru" –∫ –∑–∞–ø—Ä–æ—Å—É –¥–ª—è —Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        search_query = f"{query} lang:ru"
        
        for result in ddgs.text(search_query, max_results=num_results):
            #print('===',result)
            results.append({
                'title': result.get('title', ''),
                'url': result.get('href', ''),
                'description': result.get('body', '')
            })
    
    return results

# if __name__ == "__main__":
#     # –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
#     search_query = "–ª—É—á—à–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä—É–µ–º—ã–µ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã"
#     search_results = search_on_russian(search_query, 3)
    
#     print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –¥–ª—è '{search_query}':\n")
#     for i, result in enumerate(search_results, 1):
#         print(f"{i}. {result['title']}")
#         print(f"   –°—Å—ã–ª–∫–∞: {result['url']}")
#         print(f"   –û–ø–∏—Å–∞–Ω–∏–µ: {result['description']}\n")

def get_ddg_search_results(query, num_results=10):
    results = []
    with DDGS() as ddgs:
        for result in ddgs.text(query, max_results=num_results):
            results.append(result)  # Collect results
    return results

# –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ —Ä–æ–ª—å ''
plugin_ddg = get_plugins('').get('DUCKDUCKGO')

CODE_INPUT = range(1)
_ddg_help = '–í–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –ø–æ—Å–ª–µ :\n\r /duckduckgo_ \n\rüî∏/help /duckduckgo'

def write_duckduckgo(context, upms, res, count = 100):
    num=0
    text=''
    for _item in res[:count]:  # –≤—ã–≤–æ–¥–∏–º –ø–µ—Ä–≤—ã–µ 100 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        #text +=f"\nüëâ{news_item['title']} üéØ{news_item['source']} üìÜ({news_item['published']})"
        #print(_item) 
        num += 1
        #it = f"\n{num}.üîç<a href=\"{news_item['link']}\">{news_item['title']} üìÜ({news_item['published'][:16]})</a>"
        it = f"\n{num}.üî∂<a href=\"{_item['url']}\">{_item['description']}</a> {_item['title'][:16]}..."
        if len(text+it)>4081:
            context.bot.send_message(
                chat_id=upms.chat.id,
                text = text+"\nüî∏/help\n", 
                disable_web_page_preview=True,
                parse_mode=ParseMode.HTML)
            text=it
        else:
            text += f"{it}"

    msg = text[:4081]+"...\n\nüî∏/help /duckduckgo_ "
    context.bot.send_message( 
        chat_id=upms.chat.id, text=msg, 
        disable_web_page_preview=True,
        parse_mode=ParseMode.HTML )

def request_ddg(update: Update, context):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    upms = get_tele_command(update)
    upms.reply_text("–í–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å. /cancel_ddg - –æ—Ç–º–µ–Ω–∞")
    return CODE_INPUT

def check_ddg(update: Update, context):
    upms = get_tele_command(update)
    _input = upms.text
    upms.reply_text("üïí.–º–∏–Ω—É—Ç–∫—É..")
    if _input:
        res = search_on_russian(_input, 50) #get_ddg_search_results(_input) # search_duckduckgo(_input)
        write_duckduckgo(context, upms, res)
        return ConversationHandler.END
    else:
        _output = _ddg_help
    print(_output)
    
    context.bot.send_message(
        chat_id=upms.chat.id,
        text=_output,
        disable_web_page_preview=True,
        parse_mode=ParseMode.HTML
    )
    return ConversationHandler.END

def cancel_ddg(update: Update, context):
    """–ó–∞–≤–µ—Ä—à–∞–µ–º –¥–∏–∞–ª–æ–≥"""
    upms = get_tele_command(update)
    upms.reply_text("–æ—Ç–º–µ–Ω–∞ ddg")
    return ConversationHandler.END

def error(update, context):
    logger.warning('Update "%s" –≤—ã–∑–≤–∞–ª–æ –æ—à–∏–±–∫—É "%s"', update, context.error)

class DDGPlugin(BasePlugin):
    def setup_handlers(self, dp):

        conv_handler = ConversationHandler(
            entry_points=[CommandHandler('duckduckgo_', request_ddg)],
            states={
                CODE_INPUT: [
                    MessageHandler(Filters.text & (~Filters.command), check_ddg),
                ],
            },
            fallbacks=[
                CommandHandler('cancel_ddg', cancel_ddg),
            ]
        )
        dp.add_handler(conv_handler)
        dp.add_handler(MessageHandler(Filters.regex(rf'^/duckduckgo(/s)?.*'), commands))
        dp.add_handler(CallbackQueryHandler(button, pattern="^button_ddg"))

@check_groupe_user
def button(update: Update, context: CallbackContext) -> None:
    #user_id = extract_user_data_from_update(update)['user_id']
    #u = User.get_user(update, context)
    upms = get_tele_command(update)
    text = _ddg_help
    context.bot.edit_message_text(
        text=text,
        chat_id=upms.chat.id, #  u.user_id,
        message_id=update.callback_query.message.message_id,
        parse_mode=ParseMode.HTML
    )

@check_groupe_user
def commands(update: Update, context: CallbackContext) -> None:
    #u = User.get_user(update, context)
    upms = get_tele_command(update)
    telecmd = upms.text
    text = _ddg_help
    context.bot.send_message(
        chat_id=upms.chat.id,
        text=text,
        disable_web_page_preview=True,
        parse_mode=ParseMode.HTML
    )