# Name Plugin: ADMIN
    # - ADMIN:
    #     - desc = –ú–æ–¥—É–ª—å —Å–æ–∑–¥–∞–Ω–∏—è, –ø—Ä–æ—Å–º–æ—Ç—Ä–∞, —É–¥–∞–ª–µ–Ω–∏—è, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –∑–∞–ø—É—Å–∫–∞ —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –∑–∞–¥–∞—á /tasks
# –∏–º—è –ø–ª–∞–≥–∏–Ω–∞ CHAT –¥–æ–ª–∂–Ω–æ —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å –∏–º–µ–Ω–µ–º –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Dynaconf
# –∏–º—è –ø–ª–∞–≥–∏–Ω–∞ chat –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–µ—Ä–≤—ã–º –ø–æ–ª–µ–º –æ—Ç _ –≤ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ chat_plugin
# –∏–º—è —Ñ–∞–π–ª–∞ –ø–ª–∞–≥–∏–Ω–∞ –¥–æ–ª–∂–Ω–æ –æ–∫–∞—á–∏–≤–∞—Ç—å—Å—è –Ω–∞ _plugin
# –í –º–æ–¥—É–ª–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ–ø—Ä–¥–µ–ª–Ω –∫–ª–∞—Å—Å –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–µ
# class Plugin(BasePlugin):
#    def setup_handlers(self, dp):
# –û–ø—Ä–µ–¥–µ–ª–µ–Ω—ã —Ñ—É–Ω–∫—Ü–∏–∏ 
# _admin_help - –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è, –∫–æ—Ç–æ—Ä–∞—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ button_admin, –∏ command_admin
# ADMIN_INPUT = range(1)  - –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è, –∫–æ—Ç–æ—Ä–∞—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –¥–∏–∞–ª–æ–≥–∞—Ö

from django.utils.timezone import now
from datetime import timedelta
from telegram import ParseMode, Update
from telegram.ext import CallbackContext
from dtb.settings import get_plugins
from dtb.settings import logger
from tgbot.handlers.utils.info import get_tele_command
from tgbot.handlers.admin import static_text
from users.models import User
import pprint as pp
import string
from telegram.ext import CallbackContext, Updater, CommandHandler, MessageHandler, Filters, CallbackQueryHandler, ConversationHandler
from tgbot.plugins.base_plugin import BasePlugin
from dtb.settings import TELEGRAM_LOGS_CHAT_ID, DEBUG, settings
from tgbot.handlers.utils.decorators import check_groupe_user, superadmin_only, send_typing_action
from tgbot.handlers.admin.utils import _get_csv_from_qs_values, GetExtInfo
from users.models import Options

ADMIN_INPUT = range(1)
_admin_help = 'üåè/ask_location: –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é \nüëá/broadcast –¢–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∞–µ–º–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è ' \
'\nüë•/admin_export_users: –≠–∫—Å–ø–æ—Ä—Ç users.csv\n‚¨áÔ∏è/admin_info - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –±–æ—Ç–∞'
            
# try:
#     option = get_plugins('').get('ADMIN').get("option")
# except Exception as e:
#     option = '' # ??? –Ω—É–∂–Ω—ã –ª–∏ 

# –°–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤ (–≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ) TODO - –≤ –±—É–¥—É—â–µ–º —Ö—Ä–∞–Ω–∏—Ç—å –≤ –±–¥
FORBIDDEN_WORDS = ["—É–∫—Ä–∞", "—Ö–æ—Ö", "—Å–≤–æ", "—Ä—É—Å–Ω—è"]
obj = Options.get_by_name_and_category(name="FORBIDDEN_WORDS")
if obj:
    FORBIDDEN_WORDS = obj.value.split(",")
else:
    print("–û–±—ä–µ–∫—Ç FORBIDDEN_WORDS –Ω–µ –Ω–∞–π–¥–µ–Ω.")

print("–ó–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞",FORBIDDEN_WORDS) # –ü—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–ª–æ–≤–∞—Ä—è, –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞—Ç—å –±–æ—Ç–∞

# –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏ –ø—É–Ω–∫—Ç—É–∞—Ü–∏–∏
EXTRA_PUNCTUATION = '¬´¬ª‚Äû‚Äú‚Äü‚Äò‚Äô‚Äö‚Äõ‚Äù‚Äô‚Äì‚Äî‚Ä¶‚Ä¢‚Äπ‚Ä∫'
ALL_PUNCTUATION = string.punctuation + EXTRA_PUNCTUATION

def contains_forbidden_words(text: str, forbidden_words: set) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–µ–∫—Å—Ç –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤.
    
    :param text: —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    :param forbidden_words: –º–Ω–æ–∂–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤
    :return: True –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–æ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω–æ–µ —Å–ª–æ–≤–æ, –∏–Ω–∞—á–µ False
    """
    # –ü—Ä–∏–≤–æ–¥–∏–º —Ç–µ–∫—Å—Ç –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
    text_lower = text.lower()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–µ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω–æ–µ —Å–ª–æ–≤–æ –∫–∞–∫ –ø–æ–¥—Å—Ç—Ä–æ–∫—É
    for word in forbidden_words:
        if word in text_lower:
            return True
    return False

def universal_message_handler(update, context, func=""):
    upms = get_tele_command(update)
    # todo —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –≤ –±–¥ –≤—Å–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    message = upms
    #pp.pprint(update.to_dict())
    funcname = func.__name__ if func else ''
    if message.text:
        log = (f"–ò–∑ {upms.chat.id} –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {upms.from_user.id} –æ—Ç–ø—Ä–∞–≤–∏–ª —Ç–µ–∫—Å—Ç: {message.text} —Ñ—É–Ω–∫—Ü–∏—è {funcname} ")
        logger.info(log)
        if contains_forbidden_words(message.text, FORBIDDEN_WORDS):
            delete_message(update, context,upms.chat.id, message.message_id)
            delete_user(update, context,upms.chat.id, upms.from_user.id)
            context.bot.send_message(
                chat_id=upms.chat.id,
                text=f"‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–±–ª—é–¥–∞–π—Ç–µ –ø—Ä–∞–≤–∏–ª–∞ —á–∞—Ç–∞.",
                disable_web_page_preview=True,
                parse_mode=ParseMode.HTML
                )
            # kick_user(update, context, upms.chat.id, upms.from_user.id)
            return 
        if '/help' in message.text:
            return #func(update, context) # –û—à–∏–±–∫–∞ –∏ –ø—Ä–∏ –±—Ä–æ–¥–∫–∞—Å—Ç
    elif message.document:
        log = (f"–ò–∑ {upms.chat.id} –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {upms.from_user.id} –ø—Ä–∏—Å–ª–∞–ª –¥–æ–∫—É–º–µ–Ω—Ç: {message.document.file_name}")
        logger.info(log)
    elif message.audio or message.voice:
        log = (f"–ò–∑ {upms.chat.id} –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {upms.from_user.id} –ø—Ä–∏—Å–ª–∞–ª –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        logger.info(log)
    elif message.new_chat_members:
        log = (f"–î–æ–±–∞–≤–ª–µ–Ω —á–ª–µ–Ω: {message.new_chat_members}")
        logger.info(log)
        delete_message(update, context,upms.chat.id, message.message_id)
    elif message.left_chat_member:
        log = (f"–ß–ª–µ–Ω –æ—Å—Ç–∞–≤–∏–ª –≥—Ä—É–ø–ø—É: {message.left_chat_member}")
        logger.info(log)
        delete_message(update, context,upms.chat.id, message.message_id)
    elif message.new_chat_photo:
        log = (f"–ò–∑–º–µ–Ω–µ–Ω–æ —Ñ–æ—Ç–æ –≥—Ä—É–ø–ø—ã:  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {upms.from_user.id} {message.new_chat_photo}")
        logger.info(log)
        delete_message(update, context,upms.chat.id, message.message_id)
    
    else:
        log = (f"!–ü–æ—Å—Ç—É–ø–∏–ª–æ –¥—Ä—É–≥–æ–µ —Å–æ–±—ã—Ç–∏–µ: {message}")
        logger.info(log)
        pp.pprint(update.to_dict())  # , depth=2)
    #pp.pprint(upms.to_dict())

# –ó–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def delete_user(update: Update, context: CallbackContext,chat_id, user_id):
    try:
        # –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        #TelegramDeprecationWarning: `bot.kick_chat_member` is deprecated. Use `bot.ban_chat_member` instead.
        #context.bot.kick_chat_member(chat_id=chat_id, user_id=user_id)
        context.bot.ban_chat_member(chat_id=chat_id, user_id=user_id)
        return 200
    except Exception as e:
        print(e)
        #update.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è {message_id}.")
        return f'{e}'

# –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã delete_message
def delete_message(update: Update, context: CallbackContext,chat_id, message_id):
    try:
        # –£–¥–∞–ª–µ–Ω–∏–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        context.bot.deleteMessage(chat_id=chat_id, message_id=message_id)
        #update.message.reply_text(f"–°–æ–æ–±—â–µ–Ω–∏–µ {message_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ!")
        return 200
    except Exception as e:
        print(e)
        #update.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è {message_id}.")
        return f'{e}'

# –§—É–Ω–∫—Ü–∏—è –ë–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def kick_user(update: Update, context: CallbackContext,chat_id, user_id):
    try:
        # –£–¥–∞–ª–µ–Ω–∏–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        context.bot.kick_chat_member(chat_id=chat_id,user_id=user_id)
        # –ú–µ—Ç–æ–¥ unban_chat_member –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–µ–ª–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–π –±–∞–Ω (—É–¥–∞–ª–µ–Ω–∏–µ –±–µ–∑ –ø–æ–ª–Ω–æ–≥–æ –∑–∞–ø—Ä–µ—Ç–∞)
        #context.bot.unban_chat_member(chat_id=chat_id, user_id=user_id)
        return 200
    except Exception as e:
        print(e)
        #update.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è {message_id}.")
        return f'{e}'


@check_groupe_user
@superadmin_only
def admin_info(update: Update, context: CallbackContext) -> None:
    u = User.get_user(update, context)
    a24 = User.objects.filter(updated_at__gte=now() - timedelta(hours=24))
    text = static_text.users_amount_stat.format(
        user_count = f'{User.objects.count()} /admin_export_users',  # count may be ineffective if there are a lot of users.
        active_24 = f"{a24.count()} {list(a24.values_list('first_name', flat=True))}"
        )
    #print(list(a24.values_list('user_id', flat=True)))
    works = 1 if DEBUG else settings.get("workers", 4)
    text += f' {GetExtInfo.GetOS()}\nüöß DEBUG: {DEBUG}\n –ü–æ—Ç–æ–∫–æ–≤: {works}\nüòé chat_id: {u.user_id} \
        \nüö® TELEGRAM_LOGS_CHAT_ID: {TELEGRAM_LOGS_CHAT_ID} {GetExtInfo.GetHostInfo()} \
        {GetExtInfo.GetExtIp()} {GetExtInfo.GetGitInfo()} \
        \n\nüî∏/help: –ü–µ—Ä–µ—á–µ–Ω—å –∫–æ–º–∞–Ω–¥'
    context.bot.send_message(
        chat_id=u.user_id, # –≤–µ—Ä–Ω—É—Ç—å –ª–∏—á–Ω—ã–π —á–∞—Ç —Å—É—Ä–µ–ø–∞–¥–º–∏–Ω–∞
        text=text,
        disable_web_page_preview=True,
        parse_mode=ParseMode.HTML
    )
    

@check_groupe_user
@superadmin_only
@send_typing_action
def admin_export_users(update: Update, context: CallbackContext) -> None:
    # in values argument you can specify which fields should be returned in output csv
    upms = get_tele_command(update)
    # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ —Ä–µ–¥–∞–∫—Ä–∏—Ä–æ–≤–∞–Ω, —Ç–æ upms
    users = User.objects.all().values()
    csv_users = _get_csv_from_qs_values(users)
    upms.reply_document(csv_users)


class AdminPlugin(BasePlugin):
    def setup_handlers(self, dp):

        # conv_handler = ConversationHandler(
        #     entry_points=[CommandHandler('chat_giga_', request_chat)],
        #     states={
        #         CODE_INPUT: [
        #             MessageHandler(Filters.text & (~Filters.command), check_chat),
        #         ],
        #     },
        #     fallbacks=[
        #         CommandHandler('cancel', cancel_chat),
        #     ]
        # )
        # dp.add_handler(conv_handler)
        # admin commands
        dp.add_handler(CommandHandler("admin_info", admin_info))
        #dp.add_handler(CommandHandler("stats", admin_handlers.stats))
        dp.add_handler(CommandHandler('admin_export_users', admin_export_users))
        dp.add_handler(MessageHandler(Filters.regex(rf'^/admin(/s)?.*'), commands_admin))
        #dp.add_handler(CallbackQueryHandler(button, pattern="^button_admin"))
        dp.add_handler(CallbackQueryHandler(button, pattern="^button_admin"))


@check_groupe_user
@superadmin_only
def button(update: Update, context: CallbackContext) -> None:
    #user_id = extract_user_data_from_update(update)['user_id']
    #u = User.get_user(update, context)
    upms = get_tele_command(update)
    #print('-------------',upms,'-------------')
    text = _admin_help
    context.bot.edit_message_text(
        text=text,
        chat_id=upms.chat.id, #  u.user_id,
        message_id=update.callback_query.message.message_id,
        parse_mode=ParseMode.HTML
    )

@check_groupe_user
@superadmin_only
def commands_admin(update: Update, context: CallbackContext) -> None:
    #u = User.get_user(update, context)
    upms = get_tele_command(update)
    telecmd = upms.text
    _output = _admin_help

    context.bot.send_message(
        chat_id=upms.chat.id,
        text=_output,
        disable_web_page_preview=True,
        parse_mode=ParseMode.HTML
    )