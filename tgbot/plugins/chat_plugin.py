# Name Plugin: CHAT
    # - CHAT:
    #     - desc = –ú–æ–¥—É–ª—å —Ä–∞–±–æ—Ç—ã —Å –ì–∏–≥–∞–ß–∞—Ç–æ–º –∏ –¥—Ä—É–≥–∏–º–∏ –º–æ–¥–µ–ª—è–º–∏ ollama
# –∏–º—è –ø–ª–∞–≥–∏–Ω–∞ CHAT –¥–æ–ª–∂–Ω–æ —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å –∏–º–µ–Ω–µ–º –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Dynaconf
# –∏–º—è –ø–ª–∞–≥–∏–Ω–∞ chat –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–µ—Ä–≤—ã–º –ø–æ–ª–µ–º –æ—Ç _ –≤ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ chat_plugin
# –∏–º—è —Ñ–∞–π–ª–∞ –ø–ª–∞–≥–∏–Ω–∞ –¥–æ–ª–∂–Ω–æ –æ–∫–∞—á–∏–≤–∞—Ç—å—Å—è –Ω–∞ _plugin
# –í –º–æ–¥—É–ª–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ–ø—Ä–¥–µ–ª–Ω –∫–ª–∞—Å—Å –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–µ
# class ChatPlugin(BasePlugin):
#    def setup_handlers(self, dp):

# pip install langchain-gigachat
# https://developers.sber.ru/docs/ru/gigachain/overview
# https://developers.sber.ru/docs/ru/gigachat/api/images-generation?tool=python&lang=py
# –° ollama —Ä–∞–±–æ—Ç–∞ –ø–æ requests

from telegram import ParseMode, Update
from langchain_core.messages import HumanMessage, SystemMessage
from langchain_gigachat.chat_models import GigaChat
from dtb.settings import unblock_plugins
from dtb.settings import logger
from tgbot.handlers.utils.decorators import check_groupe_user
from tgbot.handlers.utils.info import get_tele_command
from users.models import User
from telegram.ext import CallbackContext, Updater, CommandHandler, MessageHandler, Filters, CallbackQueryHandler, ConversationHandler
from tgbot.plugins.base_plugin import BasePlugin
import requests, json

_chat_help = '–î–∏–∞–ª–æ–≥ —Å –ì–∏–≥–∞–ß–∞—Ç –æ—Ç –°–±–µ—Ä–∞ /chat_giga_ –∏ –¥—Ä—É–≥–∏–º–∏ –º–æ–¥–µ–ª—è–º–∏ ollama /chat_list'
plugins = unblock_plugins.get('CHAT')
GIGA_TOKEN = '' if not plugins else plugins.get("GIGA_CHAT")
URL_OLLAMA = '' if not plugins else plugins.get("URL_OLLAMA")
# –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ —Ä–æ–ª—å 
# try:
#     GIGA_TOKEN = plugins.get("GIGA_CHAT")
# except Exception as e:
#     GIGA_TOKEN = ''
#logger.info('--- plugin GIGA: '+str(get_plugins('GIGA')))
# –í—ã–Ω–µ—Å—Ç–∏ –Ω–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä —Å–¥–µ–ª–∞—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–∞–ø–æ–º–∏–Ω–∞—Ç—å –∏–ª–∏ –∏–∑–º–µ–Ω—è—Ç—å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç–¥–µ–ª—å–Ω–æ.
# content="–¢—ã –±–æ—Ç —Å—É–ø–µ—Ä –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç –Ω–∞ –ø–∏—Ç–æ–Ω, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø—Ä–æ–≤–µ—Å—Ç–∏ –≤—Ä–µ–º—è —Å –ø–æ–ª—å–∑–æ–π."

def ask_giga(prompt):
    if not GIGA_TOKEN:
        return "–¢–æ–∫–µ–Ω –¥–ª—è Giga –Ω–µ –æ–ø—Ä–¥–µ–ª–µ–Ω"
    giga = GigaChat(
        # –î–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–ª—é—á, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –≤ –ø—Ä–æ–µ–∫—Ç–µ GigaChat API
        credentials=GIGA_TOKEN,
        verify_ssl_certs=False,
    )
    messages = [
        SystemMessage(
            # content="–¢—ã –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã–π –±–æ—Ç-–ø—Å–∏—Ö–æ–ª–æ–≥, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ä–µ—à–∏—Ç—å –µ–≥–æ –ø—Ä–æ–±–ª–µ–º—ã."
            # content="–¢—ã –±–æ—Ç-—Å–æ–±–µ—Å–µ–¥–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø—Ä–æ–≤–µ—Å—Ç–∏ –≤—Ä–µ–º—è —Å –ø–æ–ª—å–∑–æ–π."
            content="–¢—ã –±–æ—Ç —Å—É–ø–µ—Ä –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç –Ω–∞ –ø–∏—Ç–æ–Ω, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø—Ä–æ–≤–µ—Å—Ç–∏ –≤—Ä–µ–º—è —Å –ø–æ–ª—å–∑–æ–π."
        )
    ]
    messages.append(HumanMessage(content=prompt))
    try:
        res = giga.invoke(messages)
        messages.append(res)
        return res.content
    except Exception as e:
        return e.args.__repr__()

@check_groupe_user
def text_message(update, context):
    upms = get_tele_command(update)
    telecmd = upms.text
    resp = ask_giga(telecmd)
    # –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é

    context.bot.send_message(
        chat_id=upms.chat.id,
        text=f"–û—Ç–≤–µ—Ç –ì–∏–≥–∏: {resp} \n\rüî∏/help",
        parse_mode=ParseMode.HTML
    )

CODE_INPUT = range(1)

def request_chat(update: Update, context):
    upms = get_tele_command(update)
    upms.reply_text("üòé–í–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –∫ –ì–∏–≥–∞–ß–∞—Ç—É. /cancel - –∫–æ–Ω–µ—Ü –¥–∏–∞–ª–æ–≥–∞")
    return CODE_INPUT

def check_chat(update: Update, context):
    upms = get_tele_command(update)
    _input = upms.text
    upms.reply_text("üïí.—Å–µ–∫—É–Ω–¥–æ—á–∫—É..")
    _output = ask_giga(_input)
    
    context.bot.send_message(
        chat_id=upms.chat.id,
        text=_output,
        disable_web_page_preview=True,
        parse_mode=ParseMode.HTML
    )
    request_chat(update, context) # –∑–∞—Ü–∏–∫–ª–∏–≤–∞–µ–º –¥–∏–∞–ª–æ–≥
    #return ConversationHandler.END

def cancel_chat(update: Update, context):
    """–ó–∞–≤–µ—Ä—à–∞–µ–º –¥–∏–∞–ª–æ–≥"""
    upms = get_tele_command(update)
    upms.reply_text("–¥–∏–∞–ª–æ–≥ –∑–∞–∫–æ–Ω—á–µ–Ω \n\rüî∏/help /chat /chat_giga_ - –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥")
    return ConversationHandler.END

class ChatPlugin(BasePlugin):
    def setup_handlers(self, dp):

        conv_handler = ConversationHandler(
            entry_points=[CommandHandler('chat_giga_', request_chat)],
            states={
                CODE_INPUT: [
                    MessageHandler(Filters.text & (~Filters.command), check_chat),
                ],
            },
            fallbacks=[
                CommandHandler('cancel', cancel_chat),
            ]
        )
        dp.add_handler(conv_handler)
        cmd = "/chat"
        dp.add_handler(MessageHandler(Filters.regex(rf'^{cmd}(/s)?.*'), commands_chat))
        dp.add_handler(CallbackQueryHandler(button_chat, pattern="^button_chat"))


@check_groupe_user
def button_chat(update: Update, context: CallbackContext) -> None:
    #user_id = extract_user_data_from_update(update)['user_id']
    #u = User.get_user(update, context)
    upms = get_tele_command(update)
    #print('-------------',upms,'-------------')
    text = _chat_help
    context.bot.edit_message_text(
        text=text,
        chat_id=upms.chat.id, #  u.user_id,
        message_id=update.callback_query.message.message_id,
        parse_mode=ParseMode.HTML
    )

@check_groupe_user
def commands_chat(update: Update, context: CallbackContext) -> None:
    #u = User.get_user(update, context)
    upms = get_tele_command(update)
    telecmd = upms.text
    _output = _chat_help
    context.bot.send_message(
        chat_id=upms.chat.id,
        text=_output,
        disable_web_page_preview=True,
        parse_mode=ParseMode.HTML
    )

def list_models():
    r = requests.get(f"{URL_OLLAMA}/api/tags")
    ret = ''
    mod = []
    # print(r.raise_for_status())
    for model in r.json()["models"]:
        # print(model,end='\n')
        ret +=f'{model["name"]} {model["details"]["parameter_size"]} {model["details"]["quantization_level"]}\n'
        mod.append(model["name"])
    return ret , mod

def show_model(name):
    try:
        r = requests.get(f"{URL_OLLAMA}/api/show", params={"name": name})
        r.raise_for_status()

    except requests.HTTPError as e:
        print(f"GET failed: {e}")
        # fallback to POST
        r = requests.post(f"{URL_OLLAMA}/api/show", json={"name": name})
    return f"{name}\n {r.json().get('capabilities')}\n {r.json().get('model_info')}\n {r.json().get('modified_at')}\n"

def pull_model(name):
    r = requests.post(f"{URL_OLLAMA}/api/pull", json={"name": name})
    r.raise_for_status()
    # stream
    for line in r.iter_lines():
        if line:
            print(json.loads(line))

def chat(name, messages):
    try:
        r = requests.post(
            f"{URL_OLLAMA}/api/chat",
            json={"model": name, "messages": messages, "stream": False},
        )
        r.raise_for_status()
        return r.json().get('message', {}).get('content', '')
    except requests.exceptions.RequestException as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Ollama API: {e}")
        return None

#print(list_models())
# _list, list_models = list_models()
# for i in list_models:
#     if True:
#         print(show_model(i))
#         print(chat(i, [{"role":"user","content":"–ü—Ä–∏–≤–µ—Ç, –ü–µ—Ä–µ—á–∏—Å–ª–∏ –ø–ª–∞–Ω–µ—Ç—ã —Å–æ–ª–Ω–µ—á–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã"}]))
        #print(chat(i, [{"role":"user","content":"–ü–æ—á–µ–º—É –Ω–µ—Ç –ø–ª—É—Ç–æ–Ω–∞ ?"}]))
# print(pull_model('qwen2.5-coder:1.5b'))
# mo = 'gemma3:1b'
# print(show_model(mo))
#print(chat(mo, [{"role":"user","content":"–ü—Ä–∏–≤–µ—Ç, –ü–µ—Ä–µ—á–∏—Å–ª–∏ –ø–ª–∞–Ω–µ—Ç—ã —Å–æ–ª–Ω–µ—á–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã"}]))
#print(chat(mo, [{"role":"user","content":"–ü–æ—á–µ–º—É –Ω–µ—Ç –ø–ª—É—Ç–æ–Ω–∞ ?"}]))