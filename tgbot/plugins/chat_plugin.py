# Name Plugin: CHAT
    # - CHAT:
    #     - desc = –ú–æ–¥—É–ª—å —Ä–∞–±–æ—Ç—ã —Å –ì–∏–≥–∞–ß–∞—Ç–æ–º –∏ –¥—Ä—É–≥–∏–º–∏ –º–æ–¥–µ–ª—è–º–∏ ollama
# –∏–º—è –ø–ª–∞–≥–∏–Ω–∞ CHAT –¥–æ–ª–∂–Ω–æ —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å –∏–º–µ–Ω–µ–º –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Dynaconf
# –∏–º—è –ø–ª–∞–≥–∏–Ω–∞ chat –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–µ—Ä–≤—ã–º –ø–æ–ª–µ–º –æ—Ç _ –≤ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ chat_plugin
# –∏–º—è —Ñ–∞–π–ª–∞ –ø–ª–∞–≥–∏–Ω–∞ –¥–æ–ª–∂–Ω–æ –æ–∫–∞—á–∏–≤–∞—Ç—å—Å—è –Ω–∞ _plugin
# –í –º–æ–¥—É–ª–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ–ø—Ä–¥–µ–ª–Ω –∫–ª–∞—Å—Å –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–µ
# class ChatPlugin(BasePlugin):
#    def setup_handlers(self, dp):

# pip install langchain-gigachat
# https://developers.sber.ru/docs/ru/gigachain/overview
# https://developers.sber.ru/docs/ru/gigachat/api/images-generation?tool=python&lang=py
# –° ollama —Ä–∞–±–æ—Ç–∞ –ø–æ requests
# –î–æ–ª–≥–æ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—á–∞—é—Ç - –±–æ–ª—å—à–µ –º–∏–Ω—É—Ç—ã –Ω–∞ –º–æ–µ–º –ü–ö
# gemma3:27b gpt-oss:120b llama3.2:latest qwen3:30b gpt-oss:20b qwen3:4b qwen3:8b deepseek-r1:8b
# deepseek-r1:1.5b                                         e0979632db5a    1.1 GB    4 hours ago
# qwen2.5-coder:1.5b                                       d7372fd82851    986 MB    2 days ago 
# deepseek-coder:6.7b                                      ce298d984115    3.8 GB    3 days ago 
# huggingface.co/IlyaGusev/saiga_mistral_7b_gguf:latest    8e1d1e7be53f    3.1 GB    3 days ago 
# sqlcoder:latest                                          77ac14348387    4.1 GB    3 days ago 
# gemma3:1b                       

from telegram import ParseMode, Update
from langchain_core.messages import HumanMessage, SystemMessage
from langchain_gigachat.chat_models import GigaChat
from dtb.settings import unblock_plugins
from dtb.settings import logger
from tgbot.handlers.utils.decorators import check_groupe_user
from tgbot.handlers.utils.info import get_tele_command
from users.models import User, UsersOptions
from telegram.ext import CallbackContext, Updater, CommandHandler, MessageHandler, Filters, CallbackQueryHandler, ConversationHandler
from tgbot.plugins.base_plugin import BasePlugin
import pprint as pp
import requests, json, base64
from pathlib import Path

chat_help = '–î–∏–∞–ª–æ–≥ —Å –ì–∏–≥–∞–ß–∞—Ç –æ—Ç –°–±–µ—Ä–∞ /chat_giga_ \n–∏ –¥—Ä—É–≥–∏–º–∏ –º–æ–¥–µ–ª—è–º–∏ ollama /chat_list \n/chat_sys_ - —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ —Ä–æ–ª–∏'
plugins = unblock_plugins.get('CHAT')
GIGA_TOKEN = '' if not plugins else plugins.get("GIGA_CHAT")
URL_OLLAMA = '' if not plugins else plugins.get("URL_OLLAMA",'')
MODEL_NAME = {}
#print('--- plugin GIGA: '+str(plugins),GIGA_TOKEN,URL_OLLAMA)
# –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ —Ä–æ–ª—å 
# try:
#     GIGA_TOKEN = plugins.get("GIGA_CHAT")
# except Exception as e:
#     GIGA_TOKEN = ''
#logger.info('--- plugin GIGA: '+str(get_plugins('GIGA')))
# –í—ã–Ω–µ—Å—Ç–∏ –Ω–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä —Å–¥–µ–ª–∞—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–∞–ø–æ–º–∏–Ω–∞—Ç—å –∏–ª–∏ –∏–∑–º–µ–Ω—è—Ç—å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç–¥–µ–ª—å–Ω–æ.
# content="–¢—ã –±–æ—Ç —Å—É–ø–µ—Ä –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç –Ω–∞ –ø–∏—Ç–æ–Ω, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø—Ä–æ–≤–µ—Å—Ç–∏ –≤—Ä–µ–º—è —Å –ø–æ–ª—å–∑–æ–π."


# def get_image():
#     if URL_OLLAMA == '':
#         return  'URL_OLLAMA is empty', [], {}
#     API_URL = f"{URL_OLLAMA}/api/generate"

#     payload = {
#         "model": "ozbillwang/stable_diffusion-ema-pruned-v2-1_768.q8_0:latest",                     # –∏–ª–∏ stable-diffusion / flux
#         "prompt": "A surreal portrait of a cyber‚Äëpunk cat, vivid colors",
#         "options": {
#             "num_predict": 1,
#             "width": 1024,
#             "height": 1024,
#             "seed": 777,
#         },
#         # –î–ª—è SD –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —è–≤–Ω–æ —É–∫–∞–∑–∞—Ç—å, —á—Ç–æ —Ö–æ—Ç–∏–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:
#         "stream": False,
#         "format": "json"
#     }

#     r = requests.post(API_URL, json=payload, timeout=180)   # –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å ~30‚Äë60‚ÄØ—Å–µ–∫
#     r.raise_for_status()
#     data = r.json()

#     # –í –æ—Ç–≤–µ—Ç–µ –±—É–¥–µ—Ç –ø–æ–ª–µ `image` (base64‚Äë—Å—Ç—Ä–æ–∫–∞)
#     if "image" in data:
#         img = base64.b64decode(data["image"])
#         Path("sdxl_result.png").write_bytes(img)
#         print("‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ ‚Üí sdxl_result.png")
#     else:
#         print("‚ùå –û—à–∏–±–∫–∞:", data)

def format_time(duration):
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–∑ –Ω–∞–Ω–æ—Å–µ–∫—É–Ω–¥ –≤ —Å–µ–∫—É–Ω–¥—ã
    seconds = duration / 1_000_000_000
    
    hours = int(seconds // 3600)
    minutes = int((seconds % 3600) // 60)
    seconds = round(seconds % 60, 2)
    
    return f"{hours}h {minutes}m {seconds}s"

def ask_giga(prompt, messages):
    if not GIGA_TOKEN:
        return "–¢–æ–∫–µ–Ω –¥–ª—è GigaChat –Ω–µ –æ–ø—Ä–¥–µ–ª–µ–Ω"

    giga = GigaChat(
        # –î–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–ª—é—á, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –≤ –ø—Ä–æ–µ–∫—Ç–µ GigaChat API
        credentials=GIGA_TOKEN,
        verify_ssl_certs=False,
    )

    messages.append(HumanMessage(content=prompt))
    try:
        res = giga.invoke(messages)
        messages.append(res)
        return res.content
    except Exception as e:
        return e.args.__repr__()

# @check_groupe_user
# def text_message(update, context):
#     upms = get_tele_command(update)
#     telecmd = upms.text
#     u = User.get_user(update, context)
#     MODEL_NAME.update({ u.user_id:'giga' })
    
#     resp = ask_giga(telecmd)
#     # –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é

#     context.bot.send_message(
#         chat_id=upms.chat.id,
#         text=f"–û—Ç–≤–µ—Ç –ì–∏–≥–∏: {resp} \n\rüî∏/help",
#         parse_mode=ParseMode.HTML
#     )

CODE_INPUT = range(1)
CODE_INPUT2 = range(1)
CODE_INPUT_SYS = range(1)
def request_chat_sys(update: Update, context):
    upms = get_tele_command(update)
    u = User.get_user(update, context)
    curr_model = MODEL_NAME.get(u.user_id, 'default')
    role_sys = '–¢—ã –±–æ—Ç —Å—É–ø–µ—Ä –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç –Ω–∞ –ø–∏—Ç–æ–Ω, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—å —ç—Ñ–µ–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã.'
    ques_user = '–ß—Ç–æ —Ç—ã —É–º–µ–µ—à—å ? –ú–æ–∂–µ—à—å –ª–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É ?'
    try:
        uo = UsersOptions.objects.get(user=u,name='sys_role_'+curr_model)
        if uo:
            if uo.value != '':
                role_sys = uo.value
        uoq = UsersOptions.objects.get(user=u,name='sys_ques_'+curr_model)
        if uoq:
            if uoq.value != '':
                ques_user = uoq.value
    except Exception as e:
        print(e)
    msg=(f"üòé–î–ª—è —Ç–µ–∫—É—â–µ–π –º–æ–¥–µ–ª–∏ <b>{curr_model}</b>\n–í–≤–µ–¥–∏—Ç–µ :<b>–°–∏—Å—Ç–µ–º–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä \
          —Ä–æ–ª–∏|–í–æ–ø—Ä–æ—Å –æ –º–æ–¥–µ–ª–∏</b>.\n –¢–µ–∫—É—â–∏–π: <code>{role_sys}|{ques_user}</code>\n/cancel_chat_sys - –Ω–µ –∏–∑–º–µ–Ω—è—Ç—å")
    context.bot.send_message(
        chat_id=upms.chat.id,
        text = msg,
        disable_web_page_preview=True,
        parse_mode=ParseMode.HTML
    )
    return CODE_INPUT_SYS

def check_chat_sys(update: Update, context):
    upms = get_tele_command(update)
    u = User.get_user(update, context)
    curr_model = MODEL_NAME.get(u.user_id, 'default')
    role = upms.text
    ques = ''
    if '|' in role:
        ques = role.split('|')[1]
        role = role.split('|')[0]
    
    try:
        instance, created = UsersOptions.objects.update_or_create(
                    user=u,
                    name='sys_role_'+curr_model,
                    defaults={
                        'description': '–°–∏—Å—Ç–µ–º–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä —Ä–æ–ª–∏ –¥–ª—è {"role": "system", "content": sys_msg}',
                        'category': "model_option",
                        'type': "text",
                        'value': role,
                        'enabled': True
                    }
                )
        instance, created = UsersOptions.objects.update_or_create(
                    user=u,
                    name='sys_ques_'+curr_model,
                    defaults={
                        'description': '–í–æ–ø—Ä–æ—Å –∫ –º–æ–¥–µ–ª–∏ - –ø–∞—Ä–∞–º–µ—Ç—Ä —Ä–æ–ª–∏ –¥–ª—è {"role": "user", "content": sys_msg}',
                        'category': "model_option",
                        'type': "text",
                        'value': ques,
                        'enabled': True
                    }
                )
        msg = (f"–î–ª—è —Ç–µ–∫—É—â–µ–π –º–æ–¥–µ–ª–∏ <b>{curr_model}</b>\n–°–æ—Ö—Ä–∞–Ω–∏–ª–∏.: <code>{role}|{ques}</code>")
    except Exception as e:
        msg = (f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
    msg += (f"\n\nüî∏/help /chat_list /chat_sys_")
    context.bot.send_message(
        chat_id=upms.chat.id,
        text = msg,
        disable_web_page_preview=True,
        parse_mode=ParseMode.HTML
    )
    return ConversationHandler.END

def cancel_chat_sys(update: Update, context):
    """–ó–∞–≤–µ—Ä—à–∞–µ–º –¥–∏–∞–ª–æ–≥"""
    upms = get_tele_command(update)
    upms.reply_text("–¥–∏–∞–ª–æ–≥ –∑–∞–∫–æ–Ω—á–µ–Ω \n\rüî∏/help /chat /chat_sys_ /chat_giga_ - –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥")
    return ConversationHandler.END

def request_chat_ollama(update: Update, context):
    upms = get_tele_command(update)
    u = User.get_user(update, context)
    if '/chat_ollama_' in upms.text:
        num = upms.text.replace('/chat_ollama_','')
        ret, list_model, dict_models  = get_models()
        if num.isdigit():
            name = dict_models.get(int(num))
            if name:
                MODEL_NAME.update({ u.user_id:name }) # –∑–∞–ø–æ–º–∏–Ω–∞–µ–º —Ç–µ–∫—É—â—É—é –º–æ–¥–µ–ª—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   
    upms.reply_text(f"üòé–í–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –∫ –ú–æ–¥–µ–ª–∏: '{MODEL_NAME.get(u.user_id)}'. /cancel_ollama - –∫–æ–Ω–µ—Ü –¥–∏–∞–ª–æ–≥–∞")
    return CODE_INPUT2

def check_chat_ollama(update: Update, context):
    upms = get_tele_command(update)
    u = User.get_user(update, context)
    print('---',upms.text,MODEL_NAME)
    name = MODEL_NAME.get(u.user_id)
    role = '–¢—ã –±–æ—Ç —Å—É–ø–µ—Ä –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç –Ω–∞ –ø–∏—Ç–æ–Ω, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—å —ç—Ñ–µ–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã.'
    try:
        uo = UsersOptions.objects.get(user=u,name='sys_role_'+name)
        if uo:
            if "|" in uo.value:
                if uo.value.split('|')[0]:
                    role = uo.value.split('|')[0]
    except Exception as e:
        print(e)
    output = f"<b>{upms.text}...–†–∞–∑–≥–æ–≤–æ—Ä —Å –º–æ–¥–µ–ª—å—é '{name}'</b>\n"
    # –∑–∞–ø–æ–º–∏–Ω–∞—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç ? –≥–¥–µ —Ö—Ä–∞–Ω–∏—Ç—å ?
    upms.reply_text("üïí.–æ–¥–∏–Ω –º–æ–º–µ–Ω—Ç..")
    output += chat_ollama_model(name, upms.text,sys_msg = role)
    CONST = 4090
    ot=0
    do=CONST
    while True:
        context.bot.send_message(
            chat_id=upms.chat.id,
            text = output[ot:do], # –≤—ã–≤–æ–¥–∏–º –≤ —Ç–µ–ª–µ–≥—É –ø–æ—Ä—Ü–∏—è–º–∏ –ø–æ :4090]
            disable_web_page_preview=True,
            parse_mode=ParseMode.HTML
        )
        ot += CONST
        do += CONST
        if output[ot:do]=='':
            break
    request_chat_ollama(update, context) # –∑–∞—Ü–∏–∫–ª–∏–≤–∞–µ–º –¥–∏–∞–ª–æ–≥

def cancel_chat_ollama(update: Update, context):
    """–ó–∞–≤–µ—Ä—à–∞–µ–º –¥–∏–∞–ª–æ–≥ """
    upms = get_tele_command(update)
    upms.reply_text("–¥–∏–∞–ª–æ–≥ c –º–æ–¥–µ–ª—å—é –∑–∞–∫–æ–Ω—á–µ–Ω \n\rüî∏/help /chat /chat_list /chat_sys_ /chat_ollama_ - –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥")
    return ConversationHandler.END

def request_chat(update: Update, context):
    upms = get_tele_command(update)
    upms.reply_text("üòé–í–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –∫ –ì–∏–≥–∞–ß–∞—Ç—É. /cancel_giga - –∫–æ–Ω–µ—Ü –¥–∏–∞–ª–æ–≥–∞")
    return CODE_INPUT

def check_chat(update: Update, context):
    upms = get_tele_command(update)
    _input = upms.text
    upms.reply_text("üïí.—Å–µ–∫—É–Ω–¥–æ—á–∫—É..")
    u = User.get_user(update, context)
    MODEL_NAME.update({ u.user_id:'giga' })
    role = f"–¢—ã –±–æ—Ç —Å—É–ø–µ—Ä –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç –Ω–∞ –ø–∏—Ç–æ–Ω, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø—Ä–æ–≤–æ–¥–∏—Ç—å –≤—Ä–µ–º—è —Å –ø–æ–ª—å–∑–æ–π."
    try:
        uo = UsersOptions.objects.get(user=u,name='sys_role_giga')
        if uo:
            if uo.value !='':
                role = uo.value
    except Exception as e:
        print(e)
    messages = [
        SystemMessage(
            # content="–¢—ã –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã–π –±–æ—Ç-–ø—Å–∏—Ö–æ–ª–æ–≥, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ä–µ—à–∏—Ç—å –µ–≥–æ –ø—Ä–æ–±–ª–µ–º—ã."
            # content="–¢—ã –±–æ—Ç-—Å–æ–±–µ—Å–µ–¥–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø—Ä–æ–≤–µ—Å—Ç–∏ –≤—Ä–µ–º—è —Å –ø–æ–ª—å–∑–æ–π."
            content=f"{role}"
        )
    ]
    _output = ask_giga(_input, messages)
    
    context.bot.send_message(
        chat_id=upms.chat.id,
        text=_output,
        disable_web_page_preview=True,
        parse_mode=ParseMode.HTML
    )
    request_chat(update, context) # –∑–∞—Ü–∏–∫–ª–∏–≤–∞–µ–º –¥–∏–∞–ª–æ–≥
    #return ConversationHandler.END

def cancel_chat(update: Update, context):
    """–ó–∞–≤–µ—Ä—à–∞–µ–º –¥–∏–∞–ª–æ–≥"""
    upms = get_tele_command(update)
    upms.reply_text("–¥–∏–∞–ª–æ–≥ –∑–∞–∫–æ–Ω—á–µ–Ω \n\rüî∏/help /chat /chat_sys_ /chat_giga_ - –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥")
    return ConversationHandler.END

class ChatPlugin(BasePlugin):
    def setup_handlers(self, dp):
        conv_handler = ConversationHandler(
            entry_points=[CommandHandler('chat_giga_', request_chat)],
            states={
                CODE_INPUT: [
                    MessageHandler(Filters.text & (~Filters.command), check_chat),
                ],
            },
            conversation_timeout=300,
            fallbacks=[
                CommandHandler('cancel_giga', cancel_chat),
            ]
        )
        conv_handler_ollama = ConversationHandler(
            entry_points=[MessageHandler(Filters.regex(rf'^/chat_ollama_(/s)?.*'), request_chat_ollama)],
            states={
                CODE_INPUT2: [
                    MessageHandler(Filters.text & (~Filters.command), check_chat_ollama),
                ],
            },
            conversation_timeout=300,
            fallbacks=[
                CommandHandler('cancel_ollama', cancel_chat_ollama),
            ]
        )
        conv_handler_sys = ConversationHandler(
            entry_points=[CommandHandler('chat_sys_', request_chat_sys)],
            states={
                CODE_INPUT_SYS: [
                    MessageHandler(Filters.text & (~Filters.command), check_chat_sys),
                ],
            },
            conversation_timeout=300,
            fallbacks=[
                CommandHandler('cancel_chat_sys', cancel_chat_sys),
            ]
        )
        dp.add_handler(conv_handler_sys)
        dp.add_handler(conv_handler_ollama)
        dp.add_handler(conv_handler)
        cmd = "/chat"
        dp.add_handler(MessageHandler(Filters.regex(rf'^{cmd}(/s)?.*'), commands_chat))
        dp.add_handler(CallbackQueryHandler(button_chat, pattern="^button_chat"))


@check_groupe_user
def button_chat(update: Update, context: CallbackContext) -> None:
    #user_id = extract_user_data_from_update(update)['user_id']
    #u = User.get_user(update, context)
    upms = get_tele_command(update)
    #print('-------------',upms,'-------------')
    text = chat_help
    context.bot.edit_message_text(
        text=text,
        chat_id=upms.chat.id, #  u.user_id,
        message_id=update.callback_query.message.message_id,
        parse_mode=ParseMode.HTML
    )

def chat_ollama_model(name,msg,sys_msg="–¢—ã —Ä–∞–∑–≥–æ–≤–∞—Ä–∏–≤–∞–µ—à—å —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å –µ–º—É —Å —á–µ–º-—Ç–æ."):
    messages = [
        {"role": "system", "content": sys_msg},
        {"role": "user", "content": msg},
    ]
    # output = f'<b>{msg}</b>\n'
    # upms.reply_text(f"üïí..—Å–µ–∫—É–Ω–¥–æ—á–∫—É..")
    text, res = chat_ollama(name, messages)
    if text == None:
        output = str(res)
    else:
        if "<" in text:
            text = text.replace('<', '&lt;').replace('>', '&gt;')
        output = text+ f"\n**–û–±—â–∞—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {format_time(res['total_duration'])}** "            
    # output += f"\n\rüî∏/help /chat_list /chat_sys_ /chat_ollama_{num} - –¥–∏–∞–ª–æ–≥ —Å —ç—Ç–æ–π –º–æ–¥–µ–ª—å—é"
    pp.pprint(res)
    return output


@check_groupe_user
def commands_chat(update: Update, context: CallbackContext) -> None:
    #u = User.get_user(update, context)
    upms = get_tele_command(update)
    u = User.get_user(update, context)
    output = ''
    telecmd = upms.text
    if telecmd == "/chat":
        upms.reply_text(chat_help)
        return None
    ret, list_model, dict_models  = get_models()
    if not list_model:
        upms.reply_text(f"‚ùå {ret}")
        return None
    if telecmd == "/chat_list":
        output = "üòé<b>–°–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π ollama</b>\n"
        for i in range(1, len(dict_models)+1):
            output += f"/chat_o_{i} {str(dict_models.get(i)).replace('.co/','_')}\n"
    elif telecmd == "/chat_listinfo":
        output = "üòé<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª—è—Ö ollama</b>\n"
        for i in range(1, len(dict_models)+1):
            output += f"/chat_oi_{i} {dict_models.get(i)}\n"
    elif '/chat_o_' in telecmd:
        if telecmd == "/chat_o_":
            output = chat_help
        else:
            num = int(telecmd.replace('/chat_o_',''))
            name = dict_models.get(num)
            if not name:
                upms.reply_text("‚ùå..–Ω–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –º–æ–¥–µ–ª–∏..")
                return None
            # output = f"<b>{num}.–ú–æ–¥–µ–ª—å {name}</b>\n"
            # if name == 'ozbillwang/stable_diffusion-ema-pruned-v2-1_768.q8_0:latest':
            #     return get_image()
            # elif name == 'impactframes/llama3_ifai_sd_prompt_mkr_q4km:latest':
            #     return get_image()
            # elif name == 'brxce/stable-diffusion-prompt-generator:latest':
            #     return get_image()
            # elif name == 'gnokit/improve-prompt:latest':
            #     return get_image()

            msg = "–ö–∞–∫–∞—è —Ç—ã –º–æ–¥–µ–ª—å –∏ —á—Ç–æ —Ç—ã –º–æ–∂–µ—à—å ? –£–º–µ–µ—à—å –ª–∏ —Ç—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É ?"
            try:
                uo = UsersOptions.objects.get(user=u,name='sys_ques_'+str(name))
                if uo:
                    if uo.value != '':
                        msg = uo.value
            except Exception as e:
                print(e)
            MODEL_NAME.update({u.user_id:name }) # –∑–∞–ø–æ–º–∏–Ω–∞–µ–º –∏–º—è –º–æ–¥–µ–ª–∏
            output = f"<b>{msg}. –í–æ–ø—Ä–æ—Å –∫ '{name}'</b>\n"
            upms.reply_text("üïí.–æ–¥–∏–Ω –º–æ–º–µ–Ω—Ç..")
            output += chat_ollama_model(name,msg)
            output += f"\n\rüî∏/help /chat_list /chat_sys_ /chat_ollama_{num} - –Ω–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥ —Å —ç—Ç–æ–π –º–æ–¥–µ–ª—å—é"

    elif '/chat_ollama_' in telecmd:
        if telecmd == "/chat_ollama_":
            output = chat_help
        else:
            num = int(telecmd.replace('/chat_ollama_',''))
            name = dict_models.get(num)
            output = f'...–î–∏–∞–ª–æ–≥ —Å –º–æ–¥–µ–ª—å—é !!!! {name}\n'
            
    elif '/chat_oi_' in telecmd:
        if telecmd == "/chat_oi_":
            output = chat_help
        else:
            num = int(telecmd.replace('/chat_oi_',''))
            name = dict_models.get(num)
            output = f"üòé**–ú–æ–¥–µ–ª—å {name}**\n"
            output += show_model(name)
    else:
        output = chat_help
    context.bot.send_message(
        chat_id=upms.chat.id,
        text=output,
        disable_web_page_preview=True,
        parse_mode=ParseMode.HTML
    )

def get_models():
    if URL_OLLAMA == '':
        return  'URL_OLLAMA is empty', [], {}
    try: 
        r = requests.get(f"{URL_OLLAMA}/api/tags",timeout=1)
        r.raise_for_status()
        str_models = ''
        list_models = []
        dict_model = {}
        number = 1
        # print(r.raise_for_status())
        for model in r.json()["models"]:
            # print(model,end='\n')
            str_models +=f'{model["name"]} {model["details"]["parameter_size"]} {model["details"]["quantization_level"]}\n'
            list_models.append(model["name"])
            dict_model[number]= model["name"] 
            number += 1
        return str_models , list_models, dict_model
    except Exception as e:
        msg = f"{e}".replace(URL_OLLAMA.split("://")[1].split(':')[0] ,"URL_OLLAMA")
        print(msg)
        return msg, [], {}
    
def show_model(name):
    try:
        r = requests.get(f"{URL_OLLAMA}/api/show", params={"name": name})
        r.raise_for_status()

    except requests.HTTPError as e:
        print(f"GET failed: {e}")
        # fallback to POST
        r = requests.post(f"{URL_OLLAMA}/api/show", json={"name": name})
    return f"{name}\n {r.json().get('capabilities')}\n {r.json().get('model_info')}\n {r.json().get('modified_at')}\n"

def pull_model(name):
    r = requests.post(f"{URL_OLLAMA}/api/pull", json={"name": name})
    r.raise_for_status()
    # stream
    for line in r.iter_lines():
        if line:
            print(json.loads(line))

def chat_ollama(name, messages):
    try:
        r = requests.post(
            f"{URL_OLLAMA}/api/chat",
            json={"model": name, "messages": messages, "stream": False},
        )
        r.raise_for_status()
        text = r.json().get('message', {}).get('content', '')
        return text, r.json()
    except requests.exceptions.RequestException as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Ollama API: {e}")
        return None, f"{e}".replace(URL_OLLAMA.split("://")[1].split(':')[0] ,"URL_OLLAMA")

#print(list_models())
# _list, list_models = list_models()
# for i in list_models:
#     if True:
#         print(show_model(i))
#         print(chat(i, [{"role":"user","content":"–ü—Ä–∏–≤–µ—Ç, –ü–µ—Ä–µ—á–∏—Å–ª–∏ –ø–ª–∞–Ω–µ—Ç—ã —Å–æ–ª–Ω–µ—á–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã"}]))
        #print(chat(i, [{"role":"user","content":"–ü–æ—á–µ–º—É –Ω–µ—Ç –ø–ª—É—Ç–æ–Ω–∞ ?"}]))
# print(pull_model('qwen2.5-coder:1.5b'))
# mo = 'gemma3:1b'
# print(show_model(mo))
#print(chat(mo, [{"role":"user","content":"–ü—Ä–∏–≤–µ—Ç, –ü–µ—Ä–µ—á–∏—Å–ª–∏ –ø–ª–∞–Ω–µ—Ç—ã —Å–æ–ª–Ω–µ—á–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã"}]))
#print(chat(mo, [{"role":"user","content":"–ü–æ—á–µ–º—É –Ω–µ—Ç –ø–ª—É—Ç–æ–Ω–∞ ?"}]))


def main() -> None:
    print(URL_OLLAMA)

if __name__ == '__main__':
    main()