# Name Plugin: chinese_scool
    # - CHINESE_SCOOL:
    #     - desc = –°–µ—Ä–≤–∏—Å –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ä–æ–ª–∏–∫–æ–≤ —Å –Æ—Ç—É–±–∞ –∏ –í–∫–í–∏–¥–µ–æ –∏ –æ–±–º–µ–Ω–∞ —Å—Å—ã–ª–∫–∞–º–∏ –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –±–æ—Ç–∞
# –∏–º—è –ø–ª–∞–≥–∏–Ω–∞ MEDIA –¥–æ–ª–∂–Ω–æ —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å –∏–º–µ–Ω–µ–º –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Dynaconf
# –∏–º—è –ø–ª–∞–≥–∏–Ω–∞ media –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–µ—Ä–≤—ã–º –ø–æ–ª–µ–º –æ—Ç _ –≤ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ media_plugin
# –∏–º—è —Ñ–∞–π–ª–∞ –ø–ª–∞–≥–∏–Ω–∞ –¥–æ–ª–∂–Ω–æ –æ–∫–∞—á–∏–≤–∞—Ç—å—Å—è –Ω–∞ _plugin
# –í –º–æ–¥—É–ª–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ–ø—Ä–¥–µ–ª–Ω –∫–ª–∞—Å—Å –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–µ
# class MEFIAPlugin(BasePlugin):
#    def setup_handlers(self, dp):
if __name__ != "__main__":
    from telegram import ParseMode, Update
    from telegram.ext import CallbackContext
    # from dtb.settings import get_plugins_for_roles
    # from dtb.settings import logger
    from tgbot.handlers.utils.info import get_tele_command
    from tgbot.handlers.utils.decorators import check_groupe_user
    from users.models import User
    from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackQueryHandler, ConversationHandler
    from tgbot.plugins.base_plugin import BasePlugin

    # –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ —Ä–æ–ª—å ''
    #plugin_wiki = get_plugins_for_roles('').get('WIKI')

    plugin_cmd = "chinese_scool"
    CODE_INPUT = range(1)
    plugin_help = f'–£—á–∏—Ç—å –∫–∏—Ç–∞–π—Å–∫–∏–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã. üî∏/help /{plugin_cmd} /{plugin_cmd}_ - –≤–≤–µ–¥–∏—Ç–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã' 


    def request_p(update: Update, context):
        """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        upms = get_tele_command(update)
        upms.reply_text(f"–í–≤–µ–¥–∏—Ç–µ —É—Ä–ª –∏–ª–∏ /cancel_{plugin_cmd} - –æ—Ç–º–µ–Ω–∞")
        return CODE_INPUT

    def check_p(update: Update, context):
        upms = get_tele_command(update)
        _in = upms.text
        _out = f'–ë—É–¥–µ—Ç –∑–∞–≥—Ä—É–∑–∫–∞ {_in}\n\rüî∏/help /{plugin_cmd}_' 
        context.bot.send_message(
            chat_id=upms.chat.id,
            text=_out,
            disable_web_page_preview=True,
            parse_mode=ParseMode.HTML
        )
        return ConversationHandler.END

    def cancel_p(update: Update, context):
        """–ó–∞–≤–µ—Ä—à–∞–µ–º –¥–∏–∞–ª–æ–≥"""
        upms = get_tele_command(update)
        upms.reply_text("–†–∞–∑–≥–æ–≤–æ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω.")
        return ConversationHandler.END

    # def error(update, context):
    #     logger.warning('Update "%s" caused error "%s"', update, context.error)

    class PPlugin(BasePlugin):
        def setup_handlers(self, dp):
            conv_handler = ConversationHandler(
                entry_points=[CommandHandler(f'{plugin_cmd}_', request_p)],
                states={
                    CODE_INPUT: [
                        MessageHandler(Filters.text & (~Filters.command), check_p),
                    ],
                },
                fallbacks=[
                    CommandHandler(f'cancel_{plugin_cmd}', cancel_p),
                ]
            )
            dp.add_handler(conv_handler)
            dp.add_handler(MessageHandler(Filters.regex(rf'^/{plugin_cmd}(/s)?.*'), commands))
            dp.add_handler(CallbackQueryHandler(button, pattern=f"^button_{plugin_cmd}"))

    @check_groupe_user
    def button(update: Update, context: CallbackContext) -> None:
        #user_id = extract_user_data_from_update(update)['user_id']
        u = User.get_user(update, context)
        upms = get_tele_command(update)
        text = "–í–≤–µ–¥–∏—Ç–µ ..."
        text += plugin_help
        context.bot.edit_message_text(
            text=text,
            chat_id=upms.chat.id, #  u.user_id,
            message_id=update.callback_query.message.message_id,
            parse_mode=ParseMode.HTML
        )

    @check_groupe_user
    def commands(update: Update, context: CallbackContext) -> None:
        #u = User.get_user(update, context)
        upms = get_tele_command(update)
        telecmd = upms.text
        #if telecmd == '/':
        _out = plugin_help
        context.bot.send_message(
            chat_id=upms.chat.id,
            text=_out,
            disable_web_page_preview=True,
            parse_mode=ParseMode.HTML
        )


# –ü—Ä–∏–≤–µ—Ç! –û—Ç–ª–∏—á–Ω–∞—è –∏–¥–µ—è! –í–æ—Ç –ø—Ä–æ–≥—Ä–∞–º–º–∞ –Ω–∞ Python, –∫–æ—Ç–æ—Ä–∞—è —Ä–µ–∞–ª–∏–∑—É–µ—Ç –∑–∞–¥—É–º–∞–Ω–Ω–æ–µ:

# ```python
import requests
from bs4 import BeautifulSoup
import re

def get_character_etymology(character):
    """
    –ü–æ–ª—É—á–∞–µ—Ç —ç—Ç–∏–º–æ–ª–æ–≥–∏—é –∫–∏—Ç–∞–π—Å–∫–æ–≥–æ –∏–µ—Ä–æ–≥–ª–∏—Ñ–∞ —Å archchinese.com
    """
    url = f"https://www.archchinese.com/chinese_english_dictionary.html?find={character}"
    
    try:
        response = requests.get(url)
        response.raise_for_status()
        
        soup = BeautifulSoup(response.text, 'html.parser')
        
        # –ò—â–µ–º –±–ª–æ–∫ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –∏–µ—Ä–æ–≥–ª–∏—Ñ–µ
        char_info = soup.find('div', class_='char-info')
        if not char_info:
            return None
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ–∞
        char_name = char_info.find('h2').get_text(strip=True) if char_info.find('h2') else character
        
        # –ò—â–µ–º —Ä–∞–¥–∏–∫–∞–ª
        radical_info = char_info.find('span', string=re.compile('Radical'))
        radical = radical_info.get_text(strip=True).replace('Radical:', '').strip() if radical_info else "–ù–µ –Ω–∞–π–¥–µ–Ω"
        
        # –ò—â–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ä–∞–∑–±–æ—Ä–∞
        decomposition = char_info.find('span', string=re.compile('Decomposition'))
        decomposition_text = decomposition.get_text(strip=True).replace('Decomposition:', '').strip() if decomposition else "–ù–µ –Ω–∞–π–¥–µ–Ω"
        
        # –ò—â–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        components = []
        comp_elements = char_info.find_all('a', class_='comp-link')
        for comp in comp_elements:
            comp_text = comp.get_text(strip=True)
            comp_href = comp.get('href', '')
            components.append(f"{comp_text}")
        
        return {
            'character': char_name,
            'radical': radical,
            'decomposition': decomposition_text,
            'components': components
        }
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {character}: {e}")
        return None

def parse_chinese_word(word):
    """
    –†–∞–∑–±–∏—Ä–∞–µ—Ç –∫–∏—Ç–∞–π—Å–∫–æ–µ —Å–ª–æ–≤–æ –Ω–∞ –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã –∏ –ø–æ–ª—É—á–∞–µ—Ç —ç—Ç–∏–º–æ–ª–æ–≥–∏—é –¥–ª—è –∫–∞–∂–¥–æ–≥–æ
    """
    results = []
    
    for char in word:
        print(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∏–µ—Ä–æ–≥–ª–∏—Ñ: {char}")
        etymology = get_character_etymology(char)
        
        if etymology:
            results.append(etymology)
        else:
            results.append({
                'character': char,
                'radical': "–ù–µ –Ω–∞–π–¥–µ–Ω",
                'decomposition': "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ",
                'components': []
            })
    
    return results

def display_results(word, results):
    """
    –ö—Ä–∞—Å–∏–≤–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    """
    print(f"\n{'='*60}")
    print(f"–≠–¢–ò–ú–û–õ–û–ì–ò–Ø –°–õ–û–í–ê: {word}")
    print(f"{'='*60}")
    
    for i, result in enumerate(results, 1):
        print(f"\n{i}. –ò–µ—Ä–æ–≥–ª–∏—Ñ: {result['character']}")
        print(f"   –†–∞–¥–∏–∫–∞–ª: {result['radical']}")
        print(f"   –†–∞–∑–±–æ—Ä: {result['decomposition']}")
        
        if result['components']:
            print(f"   –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã: {', '.join(result['components'])}")
        print(f"   {'-'*40}")

def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã
    """
    print("–ö–∏—Ç–∞–π—Å–∫–∏–π —ç—Ç–∏–º–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä")
    print("–í–≤–µ–¥–∏—Ç–µ –∫–∏—Ç–∞–π—Å–∫–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: Áâõ‰ªîË£§)")
    print("–î–ª—è –≤—ã—Ö–æ–¥–∞ –≤–≤–µ–¥–∏—Ç–µ 'quit'")
    
    while True:
        word = input("\n–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ: ").strip()
        
        if word.lower() in ['quit', 'exit', 'q']:
            print("–î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            break
        
        if not word:
            print("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ.")
            continue
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–µ–¥–µ–Ω—ã –∫–∏—Ç–∞–π—Å–∫–∏–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã
        if not re.search(r'[\u4e00-\u9fff]', word):
            print("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–∏—Ç–∞–π—Å–∫–∏–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã.")
            continue
        
        print(f"\n–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å–ª–æ–≤–æ: {word}...")
        
        results = parse_chinese_word(word)
        display_results(word, results)

# if __name__ == "__main__":
#     # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏:
#     # pip install requests beautifulsoup4
#     main()
# ```

# –¢–∞–∫–∂–µ –≤–æ—Ç —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è, –µ—Å–ª–∏ –≤–∞–º –Ω—É–∂–µ–Ω –±–æ–ª–µ–µ –±—ã—Å—Ç—Ä—ã–π –≤–∞—Ä–∏–∞–Ω—Ç:

# ```python
# import requests
# from bs4 import BeautifulSoup

# def get_etymology_simple(word):
#     """–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è –æ–¥–Ω–æ–≥–æ —Å–ª–æ–≤–∞"""
#     url = f"https://www.archchinese.com/chinese_english_dictionary.html?find={word}"
    
#     try:
#         response = requests.get(url)
#         soup = BeautifulSoup(response.text, 'html.parser')
        
#         # –ò—â–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
#         char_info = soup.find('div', class_='char-info')
#         if char_info:
#             radical = char_info.find('span', string=lambda x: x and 'Radical' in x)
#             decomposition = char_info.find('span', string=lambda x: x and 'Decomposition' in x)
            
#             return {
#                 'radical': radical.get_text().replace('Radical:', '').strip() if radical else "–ù–µ –Ω–∞–π–¥–µ–Ω",
#                 'decomposition': decomposition.get_text().replace('Decomposition:', '').strip() if decomposition else "–ù–µ –Ω–∞–π–¥–µ–Ω"
#             }
    
#     except:
#         return None

# # –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
# word = "Áâõ‰ªîË£§"
# print(f"–ê–Ω–∞–ª–∏–∑ —Å–ª–æ–≤–∞: {word}")

# for char in word:
#     result = get_etymology_simple(char)
#     if result:
#         print(f"\n{char}:")
#         print(f"  –†–∞–¥–∏–∫–∞–ª: {result['radical']}")
#         print(f"  –†–∞–∑–±–æ—Ä: {result['decomposition']}")
# # ```

# **–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:**

# 1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏:
# ```bash
# pip install requests beautifulsoup4
# ```

# 2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É –∏ –≤–≤–µ–¥–∏—Ç–µ –∫–∏—Ç–∞–π—Å–∫–æ–µ —Å–ª–æ–≤–æ

# **–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã:**

# - –†–∞–∑–±–∏—Ä–∞–µ—Ç —Å–ª–æ–≤–æ –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã
# - –î–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–µ—Ä–æ–≥–ª–∏—Ñ–∞ –ø–æ–ª—É—á–∞–µ—Ç —Ä–∞–¥–∏–∫–∞–ª –∏ —Ä–∞–∑–±–æ—Ä –Ω–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
# - –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ —É–¥–æ–±–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
# - –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏ —Å–µ—Ç–∏ –∏ –ø–∞—Ä—Å–∏–Ω–≥–∞

# **–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:**

# - –ó–∞–≤–∏—Å–∏—Ç –æ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å–∞–π—Ç–∞ archchinese.com (–ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –Ω–∞ —Å–∞–π—Ç–µ –º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–¥–∞)
# - –ú–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –º–µ–¥–ª–µ–Ω–Ω–æ –∏–∑-–∑–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ —Å–∞–π—Ç—É
# - –î–ª—è –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —É—Å–ª–æ–≤–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–∞–π—Ç–∞

# –ü—Ä–æ–≥—Ä–∞–º–º–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–∞—à–∏ –ø—Ä–∏–º–µ—Ä—ã –∏ –ø–æ–∫–∞–∂–µ—Ç —Ä–∞–∑–±–æ—Ä –∫–∞–∂–¥–æ–≥–æ –∏–µ—Ä–æ–≥–ª–∏—Ñ–∞ –Ω–∞ —Å–æ—Å—Ç–∞–≤–ª—è—é—â–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã!

import requests

def fetch_etymology(characters):
    base_url = 'https://hanzidb.org/api/v1'
    
    for char in characters:
        response = requests.get(f'{base_url}/characters/{char}')
        
        if response.status_code != 200:
            return f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {char}'
            
        data = response.json()
        
        etymology_data = data['etymology']
        
        if not etymology_data:
            print(f'–ù–µ—Ç —ç—Ç–∏–º–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {char}.')
        else:
            origin = etymology_data.get('origin', '')
            structure = etymology_data.get('structure', {})
            print(f'\\n–ò–µ—Ä–æ–≥–ª–∏—Ñ: {char}\\n–ü—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏–µ: {origin}\\n–°—Ç—Ä—É–∫—Ç—É—Ä–∞: {structure}')

# if __name__ == '__main__':
#     chinese_word = 'Áâõ‰ªîË£§'
#     fetch_etymology(chinese_word)

# –ü–æ–Ω–∏–º–∞—é, —á—Ç–æ –≤—ã –∏—â–µ—Ç–µ —Å–ø–æ—Å–æ–±—ã –ø–æ–ª—É—á–µ–Ω–∏—è —ç—Ç–∏–º–æ–ª–æ–≥–∏–∏ –∫–∏—Ç–∞–π—Å–∫–∏—Ö –∏–µ—Ä–æ–≥–ª–∏—Ñ–æ–≤ –ø—Ä–æ–≥—Ä–∞–º–º–Ω—ã–º –ø—É—Ç—ë–º –Ω–∞ Python. –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å—Ä–µ–¥–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö API-—Å–µ—Ä–≤–∏—Å–∞—Ö, —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—â–∏—Ö—Å—è **–∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –Ω–∞ —ç—Ç–∏–º–æ–ª–æ–≥–∏–∏ –∫–∏—Ç–∞–π—Å–∫–∏—Ö –∏–µ—Ä–æ–≥–ª–∏—Ñ–æ–≤**, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–ª–∏ –±—ã –≥–æ—Ç–æ–≤—ã–µ endpoint'—ã –¥–ª—è –ø—Ä—è–º–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.

# –û–¥–Ω–∞–∫–æ –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –æ–±—â–∏–º–∏ API –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–∏—Ç–∞–π—Å–∫–∏–º–∏ –∏–µ—Ä–æ–≥–ª–∏—Ñ–∞–º–∏, –∫–æ—Ç–æ—Ä—ã–µ —á–∞—Å—Ç–æ –≤–∫–ª—é—á–∞—é—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏—Ö —Å–æ—Å—Ç–∞–≤–µ, –∑–Ω–∞—á–µ–Ω–∏–∏, –∞ –∏–Ω–æ–≥–¥–∞ –∏ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–π —ç–≤–æ–ª—é—Ü–∏–∏. –î–ª—è –∏–µ—Ä–æ–≥–ª–∏—Ñ–∞ "Áâõ‰ªîË£§" (ni√∫z«éik√π, –¥–∂–∏–Ω—Å—ã) —ç—Ç–∏–º–æ–ª–æ–≥–∏—è —Å–∫–æ—Ä–µ–µ –±—É–¥–µ—Ç —Å–≤—è–∑–∞–Ω–∞ —Å –∏—Å—Ç–æ—Ä–∏–µ–π —Å–ª–æ–≤–∞ –∏ –∑–∞–∏–º—Å—Ç–≤–æ–≤–∞–Ω–∏–µ–º, —á–µ–º —Å –¥—Ä–µ–≤–Ω–µ–π —Ñ–æ—Ä–º–æ–π —Å–∞–º–æ–≥–æ –∏–µ—Ä–æ–≥–ª–∏—Ñ–∞.

# –í–æ—Ç –ø—Ä–∏–º–µ—Ä –ø—Ä–æ–≥—Ä–∞–º–º—ã –Ω–∞ Python, –∫–æ—Ç–æ—Ä–∞—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–µ—Ä–æ–≥–ª–∏—Ñ–∞—Ö. –ü–æ—Å–∫–æ–ª—å–∫—É –ø—Ä—è–º—ã—Ö API —ç—Ç–∏–º–æ–ª–æ–≥–∏–∏ –º–æ–∂–µ—Ç –Ω–µ –±—ã—Ç—å, –º—ã –±—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ–±—â–∏–µ API –∫–∏—Ç–∞–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞ –∏ –ø–∞—Ä—Å–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.

# ```python
import requests

def get_character_etymology(character):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–µ—Ä–æ–≥–ª–∏—Ñ–µ. 
    –ü–æ—Å–∫–æ–ª—å–∫—É –ø—Ä—è–º–æ–≥–æ API –¥–ª—è —ç—Ç–∏–º–æ–ª–æ–≥–∏–∏ –º–æ–∂–µ—Ç –Ω–µ –±—ã—Ç—å, 
    —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –æ–±—â–∏–π API –¥–ª—è –∫–∏—Ç–∞–π—Å–∫–∏—Ö –∏–µ—Ä–æ–≥–ª–∏—Ñ–æ–≤.
    """
    # –ü—Ä–∏–º–µ—Ä API: HanziDB (–Ω–µ–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π API) –∏–ª–∏ –¥—Ä—É–≥–∏–µ –ø–æ–¥–æ–±–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã
    url = f"https://hanzidb.org/character/{character}"
    headers = {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3'
    }
    
    try:
        response = requests.get(url, headers=headers)
        response.raise_for_status()  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—à–∏–±–∫–∏ HTTP
        
        # –ó–¥–µ—Å—å –≤–∞–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å HTML-–æ—Ç–≤–µ—Ç, 
        # —Ç–∞–∫ –∫–∞–∫ HanziDB –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —á–∏—Å—Ç–æ–≥–æ JSON API.
        # –≠—Ç–æ –ø—Ä–æ—Å—Ç–æ –ø—Ä–∏–º–µ—Ä; —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –ø–∞—Ä—Å–∏–Ω–≥ –±—É–¥–µ—Ç —Å–ª–æ–∂–Ω–µ–µ.
        if response.status_code == 200:
            # –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —á—Ç–æ –º—ã –Ω–∞—à–ª–∏ –±–ª–æ–∫ —Å —ç—Ç–∏–º–æ–ª–æ–≥–∏–µ–π (—ç—Ç–æ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å–∞–π—Ç–∞)
            # –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å BeautifulSoup –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ HTML
            print(f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –∏–µ—Ä–æ–≥–ª–∏—Ñ–∞ '{character}' –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ HanziDB.")
            print(f"URL: {url}")
            # –ü–æ—Å–∫–æ–ª—å–∫—É —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –ø–∞—Ä—Å–∏–Ω–≥ –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ —Ä–∞–º–∫–∏ –ø—Ä–æ—Å—Ç–æ–≥–æ –ø—Ä–∏–º–µ—Ä–∞, 
            # —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é HanziDB –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ API.
        else:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∏–µ—Ä–æ–≥–ª–∏—Ñ–∞ '{character}'.")
    except requests.RequestException as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API: {e}")

def get_word_etymology(word):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —ç—Ç–∏–º–æ–ª–æ–≥–∏–∏ —Å–ª–æ–≤–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, Áâõ‰ªîË£§).
    –í –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–ª–æ–∂–Ω–æ, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–∏–º–æ–ª–æ–≥–∏—è —Å–ª–æ–≤–∞ 
    —á–∞—Å—Ç–æ —Å–≤—è–∑–∞–Ω–∞ —Å –∏—Å—Ç–æ—Ä–∏–µ–π –∏ –∑–∞–∏–º—Å—Ç–≤–æ–≤–∞–Ω–∏—è–º–∏, –∞ –Ω–µ —Ç–æ–ª—å–∫–æ —Å –∏–µ—Ä–æ–≥–ª–∏—Ñ–∞–º–∏.
    """
    # –î–ª—è —Å–ª–æ–≤ —ç—Ç–∏–º–æ–ª–æ–≥–∏—è –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–ª–æ–≤–∞—Ä—è—Ö –∏–ª–∏ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–∞—Ö.
    # –û–¥–∏–Ω –∏–∑ —Å–ø–æ—Å–æ–±–æ–≤ ‚Äî –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å API —Å–ª–æ–≤–∞—Ä–µ–π, –Ω–∞–ø—Ä–∏–º–µ—Ä, Line Dictionary –∏–ª–∏ others.
    url = f"https://dict.co.ua/search/?q={word}"
    try:
        response = requests.get(url)
        response.raise_for_status()
        # –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ, –ø–∞—Ä—Å–∏–Ω–≥ HTML-–æ—Ç–≤–µ—Ç–∞.
        if response.status_code == 200:
            print(f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–ª–æ–≤–µ '{word}' –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–ª–æ–≤–∞—Ä–µ.")
            print(f"URL: {url}")
        else:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ª–æ–≤–µ '{word}'.")
    except requests.RequestException as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ —Å–ª–æ–≤–∞—Ä—é: {e}")

# –û—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞
if __name__ == "__main__":
    input_word = "Áâõ‰ªîË£§"
    print(f"–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è —Å–ª–æ–≤–∞: {input_word}")
    
    # –î–ª—è —Å–ª–æ–≤–∞ "Áâõ‰ªîË£§" –º—ã –º–æ–∂–µ–º –ø–æ–ø—ã—Ç–∞—Ç—å—Å—è –Ω–∞–π—Ç–∏ –æ–±—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    get_word_etymology(input_word)
    
    # –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–æ–±—Ä–∞—Ç—å —Å–ª–æ–≤–æ –Ω–∞ –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã –∏ –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –∫–∞–∂–¥–æ–º—É
    characters = list(input_word)
    for char in characters:
        print(f"\n–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è –∏–µ—Ä–æ–≥–ª–∏—Ñ–∞: {char}")
        get_character_etymology(char)

# **–í–∞–∂–Ω—ã–µ –∑–∞–º–µ—á–∞–Ω–∏—è:**

# 1.  **–û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –ø—Ä—è–º–æ–≥–æ API:** –ü—Ä—è–º—ã—Ö API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —ç—Ç–∏–º–æ–ª–æ–≥–∏–∏ –∏–µ—Ä–æ–≥–ª–∏—Ñ–æ–≤ –º–æ–∂–µ—Ç –Ω–µ –±—ã—Ç—å. –ú–Ω–æ–≥–∏–µ —Ä–µ—Å—É—Ä—Å—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —á–µ—Ä–µ–∑ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å, —á—Ç–æ —Ç—Ä–µ–±—É–µ—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ HTML (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å –ø–æ–º–æ—â—å—é `beautifulsoup4`). –í –ø—Ä–∏–º–µ—Ä–µ –≤—ã—à–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —É—Å–ª–æ–≤–Ω—ã–π URL HanziDB, –Ω–æ –≤–∞–º –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç–∞–∫–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞.
# 2.  **–ü–∞—Ä—Å–∏–Ω–≥ –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü:** –ï—Å–ª–∏ –≤—ã —Ä–µ—à–∏—Ç–µ –ø–∞—Ä—Å–∏—Ç—å –≤–µ–±-—Å–∞–π—Ç—ã, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –∏—Ö `robots.txt` –∏ —É—Å–ª–æ–≤–∏—è–º–∏ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è. –ù–µ –≤—Å–µ —Å–∞–π—Ç—ã –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é—Ç –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã.
# 3.  **–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –ø–æ–¥—Ö–æ–¥—ã:**
#     *   **–õ–æ–∫–∞–ª—å–Ω—ã–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:** –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–µ–∫—Ç—ã –ø—Ä–µ–¥–ª–∞–≥–∞—é—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å —ç—Ç–∏–º–æ–ª–æ–≥–∏–µ–π –∏–µ—Ä–æ–≥–ª–∏—Ñ–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON –∏–ª–∏ SQLite). –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–∞–¥–µ–∂–Ω–µ–µ, —á–µ–º –ø–æ–ª–∞–≥–∞—Ç—å—Å—è –Ω–∞ –≤–µ–±-API.
#     *   **–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏:** –î–ª—è Python –µ—Å—Ç—å –±–∏–±–ª–∏–æ—Ç–µ–∫–∏, —Ç–∞–∫–∏–µ –∫–∞–∫ `zhon` –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–∏—Ç–∞–π—Å–∫–∏–º —Ç–µ–∫—Å—Ç–æ–º, –Ω–æ –æ–Ω–∏ –æ–±—ã—á–Ω–æ –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—Ç –ø–æ–ª–Ω–æ–π —ç—Ç–∏–º–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.
#     *   **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤:** –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –æ–Ω–ª–∞–π–Ω-–ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –∏–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–î–≤–æ—Ä–µ—Ü –ö–∏—Ç–∞–π—Å–∫–æ–≥–æ –Ø–∑—ã–∫–∞" ) –º–æ–≥—É—Ç –∏–º–µ—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –Ω–æ –¥–æ—Å—Ç—É–ø —á–µ—Ä–µ–∑ API –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω.

# **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**

# 1.  **–ò—Å—Å–ª–µ–¥—É–π—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ API:** –ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –≤ —Å—Ç–æ—Ä–æ–Ω—É —Ç–∞–∫–∏—Ö —Ä–µ—Å—É—Ä—Å–æ–≤, –∫–∞–∫ **HanziDB**, **Arch Chinese**, **YellowBridge**, –Ω–æ –ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é—Ç –ª–∏ –æ–Ω–∏ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–µ API.
# 2.  **–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–ª–æ–≤–∞—Ä–Ω—ã–µ API:** –î–ª—è —Å–ª–æ–≤ (–∞ –Ω–µ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –∏–µ—Ä–æ–≥–ª–∏—Ñ–æ–≤) –º–æ–≥—É—Ç –ø–æ–¥–æ–π—Ç–∏ API —Å–ª–æ–≤–∞—Ä–µ–π, –Ω–∞–ø—Ä–∏–º–µ—Ä, **Pleco** (—É –Ω–∏—Ö –µ—Å—Ç—å SDK –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤) –∏–ª–∏ **Line Dictionary**.
# 3.  **–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –ø–∞—Ä—Å–∏–Ω–≥ —Å –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç—å—é:** –ï—Å–ª–∏ API –Ω–µ—Ç, –∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—á–µ–Ω—å –Ω—É–∂–Ω–∞, –º–æ–∂–Ω–æ –∞–∫–∫—É—Ä–∞—Ç–Ω–æ –ø–∞—Ä—Å–∏—Ç—å —Å–∞–π—Ç—ã, —Å–æ–±–ª—é–¥–∞—è –ø—Ä–∞–≤–∏–ª–∞ –∏ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞—è —á–∞—Å—Ç–æ—Ç—É –∑–∞–ø—Ä–æ—Å–æ–≤.

# –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ—á–Ω–æ–π –∏ –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —ç—Ç–∏–º–æ–ª–æ–≥–∏–∏ –∫–∏—Ç–∞–π—Å–∫–∏—Ö –∏–µ—Ä–æ–≥–ª–∏—Ñ–æ–≤ —á–∞—Å—Ç–æ —Ç—Ä–µ–±—É–µ—Ç—Å—è –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–µ –∏ –∞–∫–∞–¥–µ–º–∏—á–µ—Å–∫–∏–º —Ä–µ—Å—É—Ä—Å–∞–º, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–Ω—ã —á–µ—Ä–µ–∑ –ø—Ä–æ—Å—Ç—ã–µ API.